[
  {
    "objectID": "reference/quadrature.lanczos_quadrature.html",
    "href": "reference/quadrature.lanczos_quadrature.html",
    "title": "quadrature.lanczos_quadrature",
    "section": "",
    "text": "quadrature.lanczos_quadrature\nlanczos_quadrature(d, e, deg=20, quad='gw', **kwargs)\nUses the Lanczos method to obtain Gaussian quadrature estimates of the spectrum of an arbitrary operator.",
    "crumbs": [
      "Reference",
      "API Reference",
      "Lanczos",
      "quadrature.lanczos_quadrature"
    ]
  },
  {
    "objectID": "reference/operators.MatrixFunction.html",
    "href": "reference/operators.MatrixFunction.html",
    "title": "operators.MatrixFunction",
    "section": "",
    "text": "operators.MatrixFunction\nMatrixFunction(self, A, fun=None, deg=20, dtype=np.float64, **kwargs)\nLinear operator class for matrix functions.",
    "crumbs": [
      "Reference",
      "API Reference",
      "Operators",
      "operators.MatrixFunction"
    ]
  },
  {
    "objectID": "reference/lanczos.lanczos.html",
    "href": "reference/lanczos.lanczos.html",
    "title": "lanczos.lanczos",
    "section": "",
    "text": "lanczos(\n    A\n    v0=None\n    deg=None\n    rtol=1e-08\n    orth=0\n    sparse_mat=False\n    return_basis=False\n    seed=None\n    dtype=None\n    **kwargs\n)\nLanczos method for symmetric tridiagonalization.\nThis function implements Paiges A27 variant (1) of the Lanczos method for tridiagonalizing linear operators, with additional modifications to support varying degrees of re-orthogonalization. In particular, orth=0 corresponds to no re-orthogonalization, orth &lt; deg corresponds to partial re-orthogonalization, and orth &gt;= deg corresponds to full re-orthogonalization.\nThe Lanczos method builds a tridiagonal T from a symmetric A via an orthogonal change-of-basis Q:  Q^T A Q  = T  Unlike other Lanczos implementations (e.g. SciPy’s eigsh), which includes e.g. sophisticated restarting, deflation, and selective-reorthogonalization steps, this method simply executes deg steps of the Lanczos method with the supplied v0 and returns the diagonals of the resulting tridiagonal matrix T.\nRayleigh-Ritz approximations of the eigenvalues of A can be further obtained by diagonalizing T via any symmetric tridiagonal eigenvalue solver, scipy.linalg.eigh_tridiagonal though note unlike eigsh no checking is performed for ‘ghost’ or already converged eigenvalues. To increase the accuracy of these eigenvalue approximation, try increasing orth and deg. Supplying either negative values or values larger than deg for orth will result in full re-orthogonalization, though note the number of matvecs scales linearly with deg and the number of inner-products scales quadratically with orth.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nA\nUnion[np.ndarray, sparray, LinearOperator]\nSymmetric operator to tridiagonalize.\nrequired\n\n\nv0\nOptional[np.ndarray]\nInitial vector to orthogonalize against.\nNone\n\n\ndeg\nOptional[int]\nSize of the Krylov subspace to expand.\nNone\n\n\nrtol\nfloat\nRelative tolerance to consider the invariant subspace as converged.\n1e-08\n\n\north\nint\nNumber of additional Lanczos vectors to orthogonalize against.\n0\n\n\nsparse_mat\nbool\nWhether to output the tridiagonal matrix as a sparse matrix.\nFalse\n\n\nreturn_basis\nbool\nIf True, returns the Krylov basis vectors Q.\nFalse\n\n\ndtype\nOptional[np.dtype]\nThe precision dtype to specialize the computation.\nNone\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\ntuple\nA tuple (a,b) parameterizing the diagonal and off-diagonal of the tridiagonal matrix. If return_basis=True,\n\n\n\ntuple\nthe tuple (a,b), Q is returned, where Q represents an orthogonal basis for the degree-deg Krylov subspace.\n\n\n\n\n\n\n\nscipy.linalg.eigh_tridiagonal : Eigenvalue solver for real symmetric tridiagonal matrices.\noperator.matrix_function : Approximates the action of a matrix function via the Lanczos method.\n\n\n\n\n\nPaige, Christopher C. “Computational variants of the Lanczos method for the eigenproblem.” IMA Journal of Applied Mathematics 10.3 (1972): 373-381.",
    "crumbs": [
      "Reference",
      "API Reference",
      "Lanczos",
      "lanczos.lanczos"
    ]
  },
  {
    "objectID": "reference/lanczos.lanczos.html#parameters",
    "href": "reference/lanczos.lanczos.html#parameters",
    "title": "lanczos.lanczos",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nA\nUnion[np.ndarray, sparray, LinearOperator]\nSymmetric operator to tridiagonalize.\nrequired\n\n\nv0\nOptional[np.ndarray]\nInitial vector to orthogonalize against.\nNone\n\n\ndeg\nOptional[int]\nSize of the Krylov subspace to expand.\nNone\n\n\nrtol\nfloat\nRelative tolerance to consider the invariant subspace as converged.\n1e-08\n\n\north\nint\nNumber of additional Lanczos vectors to orthogonalize against.\n0\n\n\nsparse_mat\nbool\nWhether to output the tridiagonal matrix as a sparse matrix.\nFalse\n\n\nreturn_basis\nbool\nIf True, returns the Krylov basis vectors Q.\nFalse\n\n\ndtype\nOptional[np.dtype]\nThe precision dtype to specialize the computation.\nNone",
    "crumbs": [
      "Reference",
      "API Reference",
      "Lanczos",
      "lanczos.lanczos"
    ]
  },
  {
    "objectID": "reference/lanczos.lanczos.html#returns",
    "href": "reference/lanczos.lanczos.html#returns",
    "title": "lanczos.lanczos",
    "section": "",
    "text": "Name\nType\nDescription\n\n\n\n\n\ntuple\nA tuple (a,b) parameterizing the diagonal and off-diagonal of the tridiagonal matrix. If return_basis=True,\n\n\n\ntuple\nthe tuple (a,b), Q is returned, where Q represents an orthogonal basis for the degree-deg Krylov subspace.",
    "crumbs": [
      "Reference",
      "API Reference",
      "Lanczos",
      "lanczos.lanczos"
    ]
  },
  {
    "objectID": "reference/lanczos.lanczos.html#see-also",
    "href": "reference/lanczos.lanczos.html#see-also",
    "title": "lanczos.lanczos",
    "section": "",
    "text": "scipy.linalg.eigh_tridiagonal : Eigenvalue solver for real symmetric tridiagonal matrices.\noperator.matrix_function : Approximates the action of a matrix function via the Lanczos method.",
    "crumbs": [
      "Reference",
      "API Reference",
      "Lanczos",
      "lanczos.lanczos"
    ]
  },
  {
    "objectID": "reference/lanczos.lanczos.html#references",
    "href": "reference/lanczos.lanczos.html#references",
    "title": "lanczos.lanczos",
    "section": "",
    "text": "Paige, Christopher C. “Computational variants of the Lanczos method for the eigenproblem.” IMA Journal of Applied Mathematics 10.3 (1972): 373-381.",
    "crumbs": [
      "Reference",
      "API Reference",
      "Lanczos",
      "lanczos.lanczos"
    ]
  },
  {
    "objectID": "reference/stochastic.symmetric.html",
    "href": "reference/stochastic.symmetric.html",
    "title": "stochastic.symmetric",
    "section": "",
    "text": "symmetric(n, dist='normal', pd=True, ew=None, seed=None)\nGenerates a random symmetric matrix of size n with eigenvalues ew.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nn\nint\nThe size of the matrix.\nrequired\n\n\ndist\nstr\nDistribution of individual matrix entries.\n'normal'\n\n\npd\nbool\nWhether to ensure the generated matrix is positive-definite. Potentially clips eigenvalues.\nTrue\n\n\new\nnp.ndarray\nDesired eigenvalues of A. If not provided, generates random values in the range [0, 1].\nNone\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nnp.ndarray\nA random symmetric matrix with the presribed eigenvalues.",
    "crumbs": [
      "Reference",
      "API Reference",
      "Stochastic",
      "stochastic.symmetric"
    ]
  },
  {
    "objectID": "reference/stochastic.symmetric.html#parameters",
    "href": "reference/stochastic.symmetric.html#parameters",
    "title": "stochastic.symmetric",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nn\nint\nThe size of the matrix.\nrequired\n\n\ndist\nstr\nDistribution of individual matrix entries.\n'normal'\n\n\npd\nbool\nWhether to ensure the generated matrix is positive-definite. Potentially clips eigenvalues.\nTrue\n\n\new\nnp.ndarray\nDesired eigenvalues of A. If not provided, generates random values in the range [0, 1].\nNone",
    "crumbs": [
      "Reference",
      "API Reference",
      "Stochastic",
      "stochastic.symmetric"
    ]
  },
  {
    "objectID": "reference/stochastic.symmetric.html#returns",
    "href": "reference/stochastic.symmetric.html#returns",
    "title": "stochastic.symmetric",
    "section": "",
    "text": "Name\nType\nDescription\n\n\n\n\n\nnp.ndarray\nA random symmetric matrix with the presribed eigenvalues.",
    "crumbs": [
      "Reference",
      "API Reference",
      "Stochastic",
      "stochastic.symmetric"
    ]
  },
  {
    "objectID": "reference/stats.confidence_interval.html",
    "href": "reference/stats.confidence_interval.html",
    "title": "stats.confidence_interval",
    "section": "",
    "text": "stats.confidence_interval\nconfidence_interval(a, confidence=0.95, sdist='t')\nConfidence intervals for the sample mean of a set of measurements.",
    "crumbs": [
      "Reference",
      "API Reference",
      "Stochastic",
      "stats.confidence_interval"
    ]
  },
  {
    "objectID": "reference/operators.normalize_unit.html",
    "href": "reference/operators.normalize_unit.html",
    "title": "operators.normalize_unit",
    "section": "",
    "text": "operators.normalize_unit\nnormalize_unit(A)\nProduces a normalized linear operator whose eigenvalues lie in the unit interval",
    "crumbs": [
      "Reference",
      "API Reference",
      "Operators",
      "operators.normalize_unit"
    ]
  },
  {
    "objectID": "reference/operators.Toeplitz.html",
    "href": "reference/operators.Toeplitz.html",
    "title": "operators.Toeplitz",
    "section": "",
    "text": "operators.Toeplitz\nToeplitz(self, c, r=None, dtype=None)",
    "crumbs": [
      "Reference",
      "API Reference",
      "Operators",
      "operators.Toeplitz"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Package overview",
    "section": "",
    "text": "primate, short for Probabalistic Implicit Matrix Trace Estimator, is Python package that performs randomized matrix trace estimation of matrix functions—that is, matrices parameterized by functions:\n\\mathrm{tr}(f(A)) \\triangleq \\mathrm{tr}(U f(\\Lambda) U^{\\intercal}), \\quad \\quad f : [a,b] \\to \\mathbb{R}\nTrace estimates are obtained in a Monte-Carlo fashion via the stochastic Lanczos method (SLQ)1. This method is useful for sparse or highly structured matrices with efficiently computable quadratic forms.\nNotable features of primate include:\nMuch of primate’s computational code was directly ported from the (excellent) imate package—for a comparison of the two, see here.",
    "crumbs": [
      "Reference",
      "Overview"
    ]
  },
  {
    "objectID": "index.html#footnotes",
    "href": "index.html#footnotes",
    "title": "Package overview",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nUbaru, S., Chen, J., & Saad, Y. (2017). Fast estimation of tr(f(A)) via stochastic Lanczos quadrature. SIAM Journal on Matrix Analysis and Applications, 38(4), 1075-1099.↩︎\nThis includes std::function’s, C-style function pointers, functors, and lambda expressions.↩︎",
    "crumbs": [
      "Reference",
      "Overview"
    ]
  },
  {
    "objectID": "imate_compare.html",
    "href": "imate_compare.html",
    "title": "Comparison to imate",
    "section": "",
    "text": "primate’s namesake (and some of the original code1) was inspired from the (excellent) imate package, prompting questions about their differences. In general, primate was developed with slightly different goals in mind than imate, most of which have to do with things like integrability, extensibility, and choice of FFI / build system.\nNotable differences between the two packages include:\nOne motivation for developing primate was to modularize and streamline access to Lanczos-based methods, which is achieved through the use of things like function templates, type erasure, and header-only definitions. These modifications not only simplify access from user (i.e. dependent) packages, but they enable native support for arbitrary classes adhering to the LinearOperator concept. For more details on this, see the integration guides.",
    "crumbs": [
      "Reference",
      "Basics",
      "Comparison to *imate*"
    ]
  },
  {
    "objectID": "imate_compare.html#footnotes",
    "href": "imate_compare.html#footnotes",
    "title": "Comparison to imate",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nBefore v0.2, much of primate’s code was essentially ported and refactored from imate. The code for v0.2+ has been re-written using the Eigen template C++ library.↩︎\nprimate does not provide native GPU-implemented Linear operators. However, there is nothing preventing one from using e.g. CUDA- or ROCm-based GPU-based tensor libraries to accelerate matrix-vector products. Indeed, primate was designed to work with essentially any operator matching the interface.↩︎\nSee imates documentation for the list of supported functions.↩︎",
    "crumbs": [
      "Reference",
      "Basics",
      "Comparison to *imate*"
    ]
  },
  {
    "objectID": "reference/stats.MeanEstimatorCLT.html",
    "href": "reference/stats.MeanEstimatorCLT.html",
    "title": "stats.MeanEstimatorCLT",
    "section": "",
    "text": "MeanEstimatorCLT(self, confidence=0.95, atol=0.05, rtol=0.01, cvs=None)\n\n\n\n\n\nName\nDescription\n\n\n\n\nplot\nGenerates figures showing the convergence of sample trace estimates.\n\n\n\n\n\nMeanEstimatorCLT.plot(samples, real_trace=None, **kwargs)\nGenerates figures showing the convergence of sample trace estimates.",
    "crumbs": [
      "Reference",
      "API Reference",
      "Stochastic",
      "stats.MeanEstimatorCLT"
    ]
  },
  {
    "objectID": "reference/stats.MeanEstimatorCLT.html#methods",
    "href": "reference/stats.MeanEstimatorCLT.html#methods",
    "title": "stats.MeanEstimatorCLT",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nplot\nGenerates figures showing the convergence of sample trace estimates.\n\n\n\n\n\nMeanEstimatorCLT.plot(samples, real_trace=None, **kwargs)\nGenerates figures showing the convergence of sample trace estimates.",
    "crumbs": [
      "Reference",
      "API Reference",
      "Stochastic",
      "stats.MeanEstimatorCLT"
    ]
  },
  {
    "objectID": "reference/index.html",
    "href": "reference/index.html",
    "title": "Function reference",
    "section": "",
    "text": "estimators.hutch\nEstimates the trace of a symmetric A or matrix function fun(A) via the Girard-Hutchinson estimator.\n\n\n\n\n\n\n\n\n\noperators.MatrixFunction\nLinear operator class for matrix functions.\n\n\noperators.Toeplitz\n\n\n\noperators.normalize_unit\nProduces a normalized linear operator whose eigenvalues lie in the unit interval\n\n\n\n\n\n\n\n\n\nstochastic.isotropic\nGenerates random vectors from a specified isotropic distribution.\n\n\nstochastic.symmetric\nGenerates a random symmetric matrix of size n with eigenvalues ew.\n\n\nstats.confidence_interval\nConfidence intervals for the sample mean of a set of measurements.\n\n\nstats.MeanEstimatorCLT\n\n\n\n\n\n\n\n\n\n\nlanczos.lanczos\nLanczos method for symmetric tridiagonalization.\n\n\nlanczos.rayleigh_ritz\n\n\n\nquadrature.lanczos_quadrature\nUses the Lanczos method to obtain Gaussian quadrature estimates of the spectrum of an arbitrary operator.",
    "crumbs": [
      "Reference",
      "API Reference"
    ]
  },
  {
    "objectID": "reference/index.html#estimators",
    "href": "reference/index.html#estimators",
    "title": "Function reference",
    "section": "",
    "text": "estimators.hutch\nEstimates the trace of a symmetric A or matrix function fun(A) via the Girard-Hutchinson estimator.",
    "crumbs": [
      "Reference",
      "API Reference"
    ]
  },
  {
    "objectID": "reference/index.html#operators",
    "href": "reference/index.html#operators",
    "title": "Function reference",
    "section": "",
    "text": "operators.MatrixFunction\nLinear operator class for matrix functions.\n\n\noperators.Toeplitz\n\n\n\noperators.normalize_unit\nProduces a normalized linear operator whose eigenvalues lie in the unit interval",
    "crumbs": [
      "Reference",
      "API Reference"
    ]
  },
  {
    "objectID": "reference/index.html#stochastic",
    "href": "reference/index.html#stochastic",
    "title": "Function reference",
    "section": "",
    "text": "stochastic.isotropic\nGenerates random vectors from a specified isotropic distribution.\n\n\nstochastic.symmetric\nGenerates a random symmetric matrix of size n with eigenvalues ew.\n\n\nstats.confidence_interval\nConfidence intervals for the sample mean of a set of measurements.\n\n\nstats.MeanEstimatorCLT",
    "crumbs": [
      "Reference",
      "API Reference"
    ]
  },
  {
    "objectID": "reference/index.html#lanczos",
    "href": "reference/index.html#lanczos",
    "title": "Function reference",
    "section": "",
    "text": "lanczos.lanczos\nLanczos method for symmetric tridiagonalization.\n\n\nlanczos.rayleigh_ritz\n\n\n\nquadrature.lanczos_quadrature\nUses the Lanczos method to obtain Gaussian quadrature estimates of the spectrum of an arbitrary operator.",
    "crumbs": [
      "Reference",
      "API Reference"
    ]
  },
  {
    "objectID": "reference/lanczos.rayleigh_ritz.html",
    "href": "reference/lanczos.rayleigh_ritz.html",
    "title": "lanczos.rayleigh_ritz",
    "section": "",
    "text": "lanczos.rayleigh_ritz\nrayleigh_ritz(A, deg=None, return_eigenvectors=False, method='RRR', **kwargs)",
    "crumbs": [
      "Reference",
      "API Reference",
      "Lanczos",
      "lanczos.rayleigh_ritz"
    ]
  },
  {
    "objectID": "reference/operators.matrix_function.html",
    "href": "reference/operators.matrix_function.html",
    "title": "operators.matrix_function",
    "section": "",
    "text": "operators.matrix_function\nmatrix_function(A, fun=None, v=None, deg=20)"
  },
  {
    "objectID": "reference/stochastic.isotropic.html",
    "href": "reference/stochastic.isotropic.html",
    "title": "stochastic.isotropic",
    "section": "",
    "text": "isotropic(size, method='rademacher', seed=None, dtype=np.float64)\nGenerates random vectors from a specified isotropic distribution.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nsize\nUnion[int, tuple]\nOutput shape to generate.\nrequired\n\n\nmethod\nstr\nIsotropic distribution to sample from. Must be “rademacher”, “sphere”, or “normal”.\n'rademacher'\n\n\nseed\nUnion[int, np.random.Generator, None]\nSeed or generator for pseudo random number generation. .\nNone\n\n\ndtype\nnp.dtype\ndtype for the output. Must be float32 or float64.\nnp.float64\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nnp.ndarray\nRandomly generated array of shape size with entries distributed according to method.",
    "crumbs": [
      "Reference",
      "API Reference",
      "Stochastic",
      "stochastic.isotropic"
    ]
  },
  {
    "objectID": "reference/stochastic.isotropic.html#parameters",
    "href": "reference/stochastic.isotropic.html#parameters",
    "title": "stochastic.isotropic",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nsize\nUnion[int, tuple]\nOutput shape to generate.\nrequired\n\n\nmethod\nstr\nIsotropic distribution to sample from. Must be “rademacher”, “sphere”, or “normal”.\n'rademacher'\n\n\nseed\nUnion[int, np.random.Generator, None]\nSeed or generator for pseudo random number generation. .\nNone\n\n\ndtype\nnp.dtype\ndtype for the output. Must be float32 or float64.\nnp.float64",
    "crumbs": [
      "Reference",
      "API Reference",
      "Stochastic",
      "stochastic.isotropic"
    ]
  },
  {
    "objectID": "reference/stochastic.isotropic.html#returns",
    "href": "reference/stochastic.isotropic.html#returns",
    "title": "stochastic.isotropic",
    "section": "",
    "text": "Name\nType\nDescription\n\n\n\n\n\nnp.ndarray\nRandomly generated array of shape size with entries distributed according to method.",
    "crumbs": [
      "Reference",
      "API Reference",
      "Stochastic",
      "stochastic.isotropic"
    ]
  },
  {
    "objectID": "reference/estimators.hutch.html",
    "href": "reference/estimators.hutch.html",
    "title": "estimators.hutch",
    "section": "",
    "text": "hutch(\n    A\n    fun=None\n    reduce=None\n    maxiter=200\n    deg=20\n    atol=None\n    rtol=None\n    stop='confidence'\n    ncv=2\n    orth=0\n    quad='gw'\n    confidence=0.95\n    pdf='rademacher'\n    seed=None\n    num_threads=0\n    verbose=False\n    info=False\n    plot=False\n    **kwargs\n)\nEstimates the trace of a symmetric A or matrix function fun(A) via the Girard-Hutchinson estimator.\nThis function uses up to maxiter random isotropic vectors to estimate of the trace of f(A), where:  \\mathrm{tr}(f(A)) = \\mathrm{tr}(U f(\\Lambda) U^T) = \\sum_{i=1}^n f(\\lambda_i), \\quad A = U \\Lambda U^T  The estimator is obtained by averaging quadratic forms v \\mapsto v^T f(A)v, rescaling as necessary.",
    "crumbs": [
      "Reference",
      "API Reference",
      "Estimators",
      "estimators.hutch"
    ]
  },
  {
    "objectID": "reference/estimators.hutch.html#parameters",
    "href": "reference/estimators.hutch.html#parameters",
    "title": "estimators.hutch",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nA\nUnion[LinearOperator, np.ndarray]\nreal symmetric operator.\nrequired\n\n\nfun\nUnion[str, Callable, None]\nreal- or vector-valued function defined on the spectrum of A.\nNone\n\n\nreduce\nUnion[Callable, None]\nper-estimate aggregation function. Required when fun is vector-valued. Default to identity.\nNone\n\n\nmaxiter\nint\nMaximum number of random vectors to sample for the trace estimate.\n200\n\n\ndeg\nint\nDegree of the quadrature approximation. Must be at least 1.\n20\n\n\natol\nOptional[float]\nAbsolute tolerance to signal convergence for early-stopping. See notes.\nNone\n\n\nrtol\nOptional[float]\nRelative tolerance to signal convergence for early-stopping. See notes.\nNone\n\n\nstop\nstr\nEarly-stopping criteria to test estimator convergence. See details.\n'confidence'\n\n\nncv\nint\nNumber of Lanczos vectors to allocate. Must be at least 2.\n2\n\n\north\nint\nNumber of additional Lanczos vectors to orthogonalize against. Must be less than ncv.\n0\n\n\nquad\nstr\nMethod used to obtain the weights of the Gaussian quadrature. See notes.\n'gw'\n\n\nconfidence\nfloat\nConfidence level to consider estimator as converged. Only used when stop = “confidence”.\n0.95\n\n\npdf\nstr\nChoice of zero-centered distribution to sample random vectors from.\n'rademacher'\n\n\nseed\nOptional[int]\nSeed to initialize the rng entropy source. Set seed &gt; -1 for reproducibility.\nNone\n\n\nnum_threads\nint\nNumber of threads to use to parallelize the computation. Set to &lt;= 0 to let OpenMP decide.\n0\n\n\nplot\nbool\nIf true, plots the samples of the trace estimate along with their convergence characteristics.\nFalse\n\n\ninfo\nbool\nIf True, returns a dictionary containing all relevant information about the computation.\nFalse\n\n\nkwargs\ndict\nadditional key-values to parameterize the chosen function ‘fun’.\n{}",
    "crumbs": [
      "Reference",
      "API Reference",
      "Estimators",
      "estimators.hutch"
    ]
  },
  {
    "objectID": "reference/estimators.hutch.html#returns",
    "href": "reference/estimators.hutch.html#returns",
    "title": "estimators.hutch",
    "section": "Returns",
    "text": "Returns\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nUnion[float, tuple]\nEstimate the trace of f(A). If info = True, additional information about the computation is also returned.",
    "crumbs": [
      "Reference",
      "API Reference",
      "Estimators",
      "estimators.hutch"
    ]
  },
  {
    "objectID": "reference/estimators.hutch.html#see-also",
    "href": "reference/estimators.hutch.html#see-also",
    "title": "estimators.hutch",
    "section": "See Also",
    "text": "See Also\n\nlanczos: the lanczos tridiagonalization algorithm.\nMeanEstimatorCLT: Standard estimator of the mean from iid samples.",
    "crumbs": [
      "Reference",
      "API Reference",
      "Estimators",
      "estimators.hutch"
    ]
  },
  {
    "objectID": "reference/estimators.hutch.html#notes",
    "href": "reference/estimators.hutch.html#notes",
    "title": "estimators.hutch",
    "section": "Notes",
    "text": "Notes\nTo compute the weights of the quadrature, quad can be set to either ‘golub_welsch’ or ‘fttr’. The former uses implicit symmetric QR steps with Wilkinson shifts, while the latter (FTTR) uses the explicit recurrence expression for orthogonal polynomials. While both require O(\\mathrm{deg}^2) time to execute, the former requires O(\\mathrm{deg}^2) space but is highly accurate, while the latter uses only O(1) space at the cost of stability. If deg is large, fttr is preferred for performance, though pilot testing should be done to ensure that instability does not cause a large bias in the approximation.",
    "crumbs": [
      "Reference",
      "API Reference",
      "Estimators",
      "estimators.hutch"
    ]
  },
  {
    "objectID": "reference/estimators.hutch.html#reference",
    "href": "reference/estimators.hutch.html#reference",
    "title": "estimators.hutch",
    "section": "Reference",
    "text": "Reference\n\nUbaru, S., Chen, J., & Saad, Y. (2017). Fast estimation of tr(f(A)) via stochastic Lanczos quadrature. SIAM Journal on Matrix Analysis and Applications, 38(4), 1075-1099.\nHutchinson, Michael F. “A stochastic estimator of the trace of the influence matrix for Laplacian smoothing splines.” Communications in Statistics-Simulation and Computation 18.3 (1989): 1059-1076.",
    "crumbs": [
      "Reference",
      "API Reference",
      "Estimators",
      "estimators.hutch"
    ]
  },
  {
    "objectID": "reference/estimators.hutch.html#examples",
    "href": "reference/estimators.hutch.html#examples",
    "title": "estimators.hutch",
    "section": "Examples",
    "text": "Examples\n\nfrom primate2.estimators import hutch",
    "crumbs": [
      "Reference",
      "API Reference",
      "Estimators",
      "estimators.hutch"
    ]
  }
]