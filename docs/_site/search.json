[
  {
    "objectID": "reference/CountCriterion.html",
    "href": "reference/CountCriterion.html",
    "title": "CountCriterion",
    "section": "",
    "text": "CountCriterion\nCountCriterion(self, count)\nConvergence criterion that returns TRUE when above a given count.",
    "crumbs": [
      "Reference",
      "API Reference",
      "Estimators",
      "CountCriterion"
    ]
  },
  {
    "objectID": "reference/normalize_unit.html",
    "href": "reference/normalize_unit.html",
    "title": "normalize_unit",
    "section": "",
    "text": "normalize_unit\nnormalize_unit(A, interval=(-1, 1))\nNormalizes a linear operator to have its spectra contained in the interval [-1,1].",
    "crumbs": [
      "Reference",
      "API Reference",
      "Operators",
      "normalize_unit"
    ]
  },
  {
    "objectID": "reference/haar.html",
    "href": "reference/haar.html",
    "title": "haar",
    "section": "",
    "text": "haar(n, ew=None, seed=None)\nGenerates a random matrix with prescribed eigenvalues by sampling uniformly from the orthogonal group O(n).\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nn\nint\nThe size of the matrix.\nrequired\n\n\new\nnp.ndarray\nDesired eigenvalues of A. If not provided, generates random values in the range [0, 1].\nNone\n\n\nseed\nUnion[int, np.random.Generator, None]\nseed for the random number generator.\nNone\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nnp.ndarray\nA random matrix with the presribed eigenvalues.",
    "crumbs": [
      "Reference",
      "API Reference",
      "Random",
      "haar"
    ]
  },
  {
    "objectID": "reference/haar.html#parameters",
    "href": "reference/haar.html#parameters",
    "title": "haar",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nn\nint\nThe size of the matrix.\nrequired\n\n\new\nnp.ndarray\nDesired eigenvalues of A. If not provided, generates random values in the range [0, 1].\nNone\n\n\nseed\nUnion[int, np.random.Generator, None]\nseed for the random number generator.\nNone",
    "crumbs": [
      "Reference",
      "API Reference",
      "Random",
      "haar"
    ]
  },
  {
    "objectID": "reference/haar.html#returns",
    "href": "reference/haar.html#returns",
    "title": "haar",
    "section": "",
    "text": "Name\nType\nDescription\n\n\n\n\n\nnp.ndarray\nA random matrix with the presribed eigenvalues.",
    "crumbs": [
      "Reference",
      "API Reference",
      "Random",
      "haar"
    ]
  },
  {
    "objectID": "reference/lanczos_quadrature.html",
    "href": "reference/lanczos_quadrature.html",
    "title": "lanczos_quadrature",
    "section": "",
    "text": "lanczos_quadrature(\n    d,\n    e,\n    deg=None,\n    quad='gw',\n    nodes=None,\n    weights=None,\n    **kwargs,\n)\nCompute the Gaussian quadrature rule of a tridiagonal Jacobi matrix.\nThis function computes the fixed degree Gaussian quadrature rule for a symmetric Jacobi matrix J, which associates nodes x_i to the eigenvalues of J and weights w_i to the squares of the first components of their corresponding normalized eigenvectors. The resulting rule is a weighted sum approximating the definite integral:\n \\int_{a}^{b} f(x) \\omega(x) dx \\approx \\sum\\limits_{i=1}^d f(x_i) \\cdot w_i \nwhere \\omega(x) denotes the weight function and f(x) represents the function being approximated. When J is constructed by the Lanczos method on a symmetric matrix A \\in \\mathbb{R}^{n \\times n}, the rule can be used to approximate the weighted integral:\n \\int_{a}^{b} f(x) \\psi(x; A, v) dx \\approx \\sum\\limits_{i=1}^n f(\\lambda_i)\nwhere \\psi(x) is the eigenvector spectral density associated to the pair (A,v):\n \\psi(x; A, v) = \\sum\\limits_{i=1}^n \\lvert u_i^T v \\rvert^2 \\delta(x - \\lambda_i), \\quad A = U \\Lambda U^T \nFor more details on this, see the references.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nd\nnp.ndarray\narray of n diagonal elements.\nrequired\n\n\ne\nnp.ndarray\narray of n or n-1 off-diagonal elements. See details.\nrequired\n\n\ndeg\nOptional[int]\ndegree of the quadrature rule to compute.\nNone\n\n\nquad\nstr\nmethod used to compute the rule. Either Golub Welsch or FTTR is supported.\n'gw'\n\n\nnodes\nOptional[np.ndarray]\noutput array to store the deg nodes of the quadrature (optional).\nNone\n\n\nweights\nOptional[np.ndarray]\noutput array to store the deg weights of the quadrature (optional).\nNone\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\n\ntuple (nodes, weights) of the degree-deg Gaussian quadrature rule.\n\n\n\n\n\n\nTo compute the weights of the quadrature, quad can be set to either ‘golub_welsch’ or ‘fttr’. The former uses a LAPACK call to the method of relatively robust representations (RRR), which builds local LDL decompositions around clusters of eigenvalues, while the latter (FTTR) uses the explicit recurrence expression for orthogonal polynomials. Though both require O(\\mathrm{deg}^2) time to execute, the former requires O(\\mathrm{deg}^2) space but is highly accurate, while the latter uses only O(1) space at the cost of backward stability. If deg is large, fttr is preferred for performance, though pilot testing should be done to ensure that instability does not cause a large bias in the approximation.",
    "crumbs": [
      "Reference",
      "API Reference",
      "Lanczos",
      "lanczos_quadrature"
    ]
  },
  {
    "objectID": "reference/lanczos_quadrature.html#parameters",
    "href": "reference/lanczos_quadrature.html#parameters",
    "title": "lanczos_quadrature",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nd\nnp.ndarray\narray of n diagonal elements.\nrequired\n\n\ne\nnp.ndarray\narray of n or n-1 off-diagonal elements. See details.\nrequired\n\n\ndeg\nOptional[int]\ndegree of the quadrature rule to compute.\nNone\n\n\nquad\nstr\nmethod used to compute the rule. Either Golub Welsch or FTTR is supported.\n'gw'\n\n\nnodes\nOptional[np.ndarray]\noutput array to store the deg nodes of the quadrature (optional).\nNone\n\n\nweights\nOptional[np.ndarray]\noutput array to store the deg weights of the quadrature (optional).\nNone",
    "crumbs": [
      "Reference",
      "API Reference",
      "Lanczos",
      "lanczos_quadrature"
    ]
  },
  {
    "objectID": "reference/lanczos_quadrature.html#returns",
    "href": "reference/lanczos_quadrature.html#returns",
    "title": "lanczos_quadrature",
    "section": "",
    "text": "Name\nType\nDescription\n\n\n\n\n\n\ntuple (nodes, weights) of the degree-deg Gaussian quadrature rule.",
    "crumbs": [
      "Reference",
      "API Reference",
      "Lanczos",
      "lanczos_quadrature"
    ]
  },
  {
    "objectID": "reference/lanczos_quadrature.html#notes",
    "href": "reference/lanczos_quadrature.html#notes",
    "title": "lanczos_quadrature",
    "section": "",
    "text": "To compute the weights of the quadrature, quad can be set to either ‘golub_welsch’ or ‘fttr’. The former uses a LAPACK call to the method of relatively robust representations (RRR), which builds local LDL decompositions around clusters of eigenvalues, while the latter (FTTR) uses the explicit recurrence expression for orthogonal polynomials. Though both require O(\\mathrm{deg}^2) time to execute, the former requires O(\\mathrm{deg}^2) space but is highly accurate, while the latter uses only O(1) space at the cost of backward stability. If deg is large, fttr is preferred for performance, though pilot testing should be done to ensure that instability does not cause a large bias in the approximation.",
    "crumbs": [
      "Reference",
      "API Reference",
      "Lanczos",
      "lanczos_quadrature"
    ]
  },
  {
    "objectID": "reference/ToleranceCriterion.html",
    "href": "reference/ToleranceCriterion.html",
    "title": "ToleranceCriterion",
    "section": "",
    "text": "ToleranceCriterion\nToleranceCriterion(self, rtol=0.01, atol=1.49e-08, ord=2)",
    "crumbs": [
      "Reference",
      "API Reference",
      "Estimators",
      "ToleranceCriterion"
    ]
  },
  {
    "objectID": "reference/isotropic.html",
    "href": "reference/isotropic.html",
    "title": "isotropic",
    "section": "",
    "text": "random.isotropic(size=None, pdf='rademacher', seed=None)\nGenerates random vectors from a specified isotropic distribution.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nsize\nUnion[int, tuple, None]\nOutput shape to generate.\nNone\n\n\npdf\nstr\nIsotropic distribution to sample from. Must be “rademacher”, “sphere”, or “normal”.\n'rademacher'\n\n\nseed\nUnion[int, np.random.Generator, None]\nSeed or generator for pseudorandom number generation.\nNone\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nnp.ndarray\nArray of shape size with rows distributed according to pdf.",
    "crumbs": [
      "Reference",
      "API Reference",
      "Random",
      "isotropic"
    ]
  },
  {
    "objectID": "reference/isotropic.html#parameters",
    "href": "reference/isotropic.html#parameters",
    "title": "isotropic",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nsize\nUnion[int, tuple, None]\nOutput shape to generate.\nNone\n\n\npdf\nstr\nIsotropic distribution to sample from. Must be “rademacher”, “sphere”, or “normal”.\n'rademacher'\n\n\nseed\nUnion[int, np.random.Generator, None]\nSeed or generator for pseudorandom number generation.\nNone",
    "crumbs": [
      "Reference",
      "API Reference",
      "Random",
      "isotropic"
    ]
  },
  {
    "objectID": "reference/isotropic.html#returns",
    "href": "reference/isotropic.html#returns",
    "title": "isotropic",
    "section": "",
    "text": "Name\nType\nDescription\n\n\n\n\n\nnp.ndarray\nArray of shape size with rows distributed according to pdf.",
    "crumbs": [
      "Reference",
      "API Reference",
      "Random",
      "isotropic"
    ]
  },
  {
    "objectID": "reference/stats.confidence_interval.html",
    "href": "reference/stats.confidence_interval.html",
    "title": "stats.confidence_interval",
    "section": "",
    "text": "stats.confidence_interval\nconfidence_interval(a, confidence=0.95, sdist='t')\nConfidence intervals for the sample mean of a set of measurements.",
    "crumbs": [
      "Reference",
      "API Reference",
      "Stats",
      "stats.confidence_interval"
    ]
  },
  {
    "objectID": "reference/rayleigh_ritz.html",
    "href": "reference/rayleigh_ritz.html",
    "title": "rayleigh_ritz",
    "section": "",
    "text": "rayleigh_ritz\nrayleigh_ritz(A, deg=None, return_eigenvectors=False, method='RRR', **kwargs)",
    "crumbs": [
      "Reference",
      "API Reference",
      "Lanczos",
      "rayleigh_ritz"
    ]
  },
  {
    "objectID": "reference/Toeplitz.html",
    "href": "reference/Toeplitz.html",
    "title": "Toeplitz",
    "section": "",
    "text": "Toeplitz\nToeplitz(self, c, r=None, dtype=None)\nMatrix-free operator for representing Toeplitz or circulant matrices.",
    "crumbs": [
      "Reference",
      "API Reference",
      "Operators",
      "Toeplitz"
    ]
  },
  {
    "objectID": "reference/ConfidenceCriterion.html",
    "href": "reference/ConfidenceCriterion.html",
    "title": "ConfidenceCriterion",
    "section": "",
    "text": "ConfidenceCriterion(self, confidence=0.95, atol=0.05, rtol=0.01)\nParameterizes an expected value estimator that checks convergence of a sample mean within a confidence interval using the CLT.\n\n\n\ncall = Updates the estimator with newly measured samples\nconverged = Checks convergence of the estimator within an interval\n  plot = Plots the samples and their sample distribution CI's",
    "crumbs": [
      "Reference",
      "API Reference",
      "Estimators",
      "ConfidenceCriterion"
    ]
  },
  {
    "objectID": "reference/ConfidenceCriterion.html#provides-the-following-methods",
    "href": "reference/ConfidenceCriterion.html#provides-the-following-methods",
    "title": "ConfidenceCriterion",
    "section": "",
    "text": "call = Updates the estimator with newly measured samples\nconverged = Checks convergence of the estimator within an interval\n  plot = Plots the samples and their sample distribution CI's",
    "crumbs": [
      "Reference",
      "API Reference",
      "Estimators",
      "ConfidenceCriterion"
    ]
  },
  {
    "objectID": "reference/MatrixFunction.html",
    "href": "reference/MatrixFunction.html",
    "title": "MatrixFunction",
    "section": "",
    "text": "MatrixFunction(self, A, fun=None, deg=20, dtype=np.float64, **kwargs)\nLinear operator class for matrix functions.\n\n\n\n\n\nName\nDescription\n\n\n\n\nquad\nEstimates the quadratic form of the matrix function using Lanczos quadrature.\n\n\n\n\n\nMatrixFunction.quad(x)\nEstimates the quadratic form of the matrix function using Lanczos quadrature.\nThis function uses the Lanczos method to estimate the quadratic form:  x \\mapsto x^T f(A) x  The error of the approximation depends on both the degree of the Krylov expansion and the conditioning of f(A).\nNote this method is mathematically equivalent though computationally distinct from the operation x @ (A @ x), i.e. the operation which first applies x \\mapsto f(A)x and then performs a dot product. In particular, the",
    "crumbs": [
      "Reference",
      "API Reference",
      "Operators",
      "MatrixFunction"
    ]
  },
  {
    "objectID": "reference/MatrixFunction.html#methods",
    "href": "reference/MatrixFunction.html#methods",
    "title": "MatrixFunction",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nquad\nEstimates the quadratic form of the matrix function using Lanczos quadrature.\n\n\n\n\n\nMatrixFunction.quad(x)\nEstimates the quadratic form of the matrix function using Lanczos quadrature.\nThis function uses the Lanczos method to estimate the quadratic form:  x \\mapsto x^T f(A) x  The error of the approximation depends on both the degree of the Krylov expansion and the conditioning of f(A).\nNote this method is mathematically equivalent though computationally distinct from the operation x @ (A @ x), i.e. the operation which first applies x \\mapsto f(A)x and then performs a dot product. In particular, the",
    "crumbs": [
      "Reference",
      "API Reference",
      "Operators",
      "MatrixFunction"
    ]
  },
  {
    "objectID": "reference/ConvergenceCriterion.html",
    "href": "reference/ConvergenceCriterion.html",
    "title": "ConvergenceCriterion",
    "section": "",
    "text": "ConvergenceCriterion\nConvergenceCriterion(self, operation)\nGeneric stopping criteria for sequences.",
    "crumbs": [
      "Reference",
      "API Reference",
      "Estimators",
      "ConvergenceCriterion"
    ]
  },
  {
    "objectID": "reference/xdiag.html",
    "href": "reference/xdiag.html",
    "title": "xdiag",
    "section": "",
    "text": "xdiag\ndiagonal.xdiag(A, m=None, pdf='sphere', seed=None)\nEstimates the diagonal of A using m / 2 matrix-vector multiplications.\nBased originally on Program SM4.3, a MATLAB 2022b implementation for XDiag, by Ethan Epperly.",
    "crumbs": [
      "Reference",
      "API Reference",
      "Diagonal",
      "xdiag"
    ]
  },
  {
    "objectID": "reference/hutch.html",
    "href": "reference/hutch.html",
    "title": "hutch",
    "section": "",
    "text": "trace.hutch(\n    A,\n    batch=32,\n    pdf='rademacher',\n    converge='confidence',\n    seed=None,\n    full=False,\n    callback=None,\n    **kwargs,\n)\nEstimates the trace of a symmetric A via the Girard-Hutchinson estimator.\nThis function uses up to maxiter random vectors to estimate of the trace of A via the approximation:  \\mathrm{tr}(A) = \\sum_{i=1}^n e_i^T A e_i \\approx n^{-1}\\sum_{i=1}^n v^T A v  When v are isotropic, this approximation forms an unbiased estimator of the trace.",
    "crumbs": [
      "Reference",
      "API Reference",
      "Trace",
      "hutch"
    ]
  },
  {
    "objectID": "reference/hutch.html#parameters",
    "href": "reference/hutch.html#parameters",
    "title": "hutch",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nA\nUnion[LinearOperator, np.ndarray]\nreal symmetric matrix or linear operator.\nrequired\n\n\nbatch\nint\nNumber of random vectors to sample at a time for batched matrix multiplication.\n32\n\n\npdf\nUnion[str, Callable]\nChoice of zero-centered distribution to sample random vectors from.\n'rademacher'\n\n\nconverge\nUnion[str, ConvergenceCriterion]\nConvergence criterion to test for estimator convergence. See details.\n'confidence'\n\n\nseed\nUnion[int, np.random.Generator, None]\nSeed to initialize the rng entropy source. Set seed &gt; -1 for reproducibility.\nNone\n\n\nfull\nbool\nWhether to return additional information about the computation.\nFalse\n\n\ncallback\nOptional[Callable]\nOptional callable to execute after each batch of samples.\nNone\n\n\n**kwargs\ndict\nAdditional keyword arguments to parameterize the convergence criterion.\n{}",
    "crumbs": [
      "Reference",
      "API Reference",
      "Trace",
      "hutch"
    ]
  },
  {
    "objectID": "reference/hutch.html#returns",
    "href": "reference/hutch.html#returns",
    "title": "hutch",
    "section": "Returns",
    "text": "Returns\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nUnion[float, tuple]\nEstimate the trace of f(A). If info = True, additional information about the computation is also returned.",
    "crumbs": [
      "Reference",
      "API Reference",
      "Trace",
      "hutch"
    ]
  },
  {
    "objectID": "reference/hutch.html#see-also",
    "href": "reference/hutch.html#see-also",
    "title": "hutch",
    "section": "See Also",
    "text": "See Also\n\nlanczos: the lanczos tridiagonalization algorithm.\nMeanEstimator: Standard estimator of the mean from iid samples.\nConfidenceCriterion: Criterion for convergence that uses the central limit theorem.",
    "crumbs": [
      "Reference",
      "API Reference",
      "Trace",
      "hutch"
    ]
  },
  {
    "objectID": "reference/hutch.html#reference",
    "href": "reference/hutch.html#reference",
    "title": "hutch",
    "section": "Reference",
    "text": "Reference\n\nUbaru, S., Chen, J., & Saad, Y. (2017). Fast estimation of tr(f(A)) via stochastic Lanczos quadrature. SIAM Journal on Matrix Analysis and Applications, 38(4), 1075-1099.\nHutchinson, Michael F. “A stochastic estimator of the trace of the influence matrix for Laplacian smoothing splines.” Communications in Statistics-Simulation and Computation 18.3 (1989): 1059-1076.",
    "crumbs": [
      "Reference",
      "API Reference",
      "Trace",
      "hutch"
    ]
  },
  {
    "objectID": "reference/hutch.html#examples",
    "href": "reference/hutch.html#examples",
    "title": "hutch",
    "section": "Examples",
    "text": "Examples\n\nfrom primate.trace import hutch",
    "crumbs": [
      "Reference",
      "API Reference",
      "Trace",
      "hutch"
    ]
  },
  {
    "objectID": "reference/xtrace.html",
    "href": "reference/xtrace.html",
    "title": "xtrace",
    "section": "",
    "text": "trace.xtrace(A, batch=32, pdf='sphere', seed=None, full=False, verbose=0)\nEstimates the trace of A using the XTrace trace estimator.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nA\nUnion[LinearOperator, np.ndarray]\nreal symmetric matrix or linear operator.\nrequired\n\n\nbatch\nint\nNumber of random vectors to sample at a time for batched matrix multiplication.\n32\n\n\npdf\nUnion[str, Callable]\nChoice of zero-centered distribution to sample random vectors from.\n'sphere'\n\n\nconverge\n\nConvergence criterion to test for estimator convergence. See details.\nrequired\n\n\nseed\nUnion[int, np.random.Generator, None]\nSeed to initialize the rng entropy source. Set seed &gt; -1 for reproducibility.\nNone\n\n\nfull\nbool\nWhether to return additional information about the computation.\nFalse\n\n\ncallback\n\nOptional callable to execute after each batch of samples.\nrequired\n\n\n**kwargs\n\nAdditional keyword arguments to parameterize the convergence criterion.\nrequired\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nUnion[float, tuple]\nEstimate the trace of A. If info = True, additional information about the computation is also returned.",
    "crumbs": [
      "Reference",
      "API Reference",
      "Trace",
      "xtrace"
    ]
  },
  {
    "objectID": "reference/xtrace.html#parameters",
    "href": "reference/xtrace.html#parameters",
    "title": "xtrace",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nA\nUnion[LinearOperator, np.ndarray]\nreal symmetric matrix or linear operator.\nrequired\n\n\nbatch\nint\nNumber of random vectors to sample at a time for batched matrix multiplication.\n32\n\n\npdf\nUnion[str, Callable]\nChoice of zero-centered distribution to sample random vectors from.\n'sphere'\n\n\nconverge\n\nConvergence criterion to test for estimator convergence. See details.\nrequired\n\n\nseed\nUnion[int, np.random.Generator, None]\nSeed to initialize the rng entropy source. Set seed &gt; -1 for reproducibility.\nNone\n\n\nfull\nbool\nWhether to return additional information about the computation.\nFalse\n\n\ncallback\n\nOptional callable to execute after each batch of samples.\nrequired\n\n\n**kwargs\n\nAdditional keyword arguments to parameterize the convergence criterion.\nrequired",
    "crumbs": [
      "Reference",
      "API Reference",
      "Trace",
      "xtrace"
    ]
  },
  {
    "objectID": "reference/xtrace.html#returns",
    "href": "reference/xtrace.html#returns",
    "title": "xtrace",
    "section": "",
    "text": "Name\nType\nDescription\n\n\n\n\n\nUnion[float, tuple]\nEstimate the trace of A. If info = True, additional information about the computation is also returned.",
    "crumbs": [
      "Reference",
      "API Reference",
      "Trace",
      "xtrace"
    ]
  },
  {
    "objectID": "basic/imate_compare.html",
    "href": "basic/imate_compare.html",
    "title": "Comparison to imate",
    "section": "",
    "text": "primate’s namesake (and some of the original code1) was inspired from the (excellent) imate package, prompting questions about their differences. In general, primate was developed with slightly different goals in mind than imate, most of which have to do with things like integrability, extensibility, and choice of FFI / build system.\nNotable differences between the two packages include:\nOne motivation for developing primate was to modularize and streamline access to Lanczos-based methods, which is achieved through the use of things like function templates, type erasure, and header-only definitions. These modifications not only simplify access from user (i.e. dependent) packages, but they enable native support for arbitrary classes adhering to the LinearOperator concept. For more details on this, see the integration guides.",
    "crumbs": [
      "Reference",
      "Basics",
      "Comparison to *imate*"
    ]
  },
  {
    "objectID": "basic/imate_compare.html#footnotes",
    "href": "basic/imate_compare.html#footnotes",
    "title": "Comparison to imate",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nBefore v0.2, much of primate’s code was essentially ported and refactored from imate. The code for v0.2+ has been re-written using the Eigen template C++ library.↩︎\nprimate does not provide native GPU-implemented Linear operators. However, there is nothing preventing one from using e.g. CUDA- or ROCm-based GPU-based tensor libraries to accelerate matrix-vector products. Indeed, primate was designed to work with essentially any operator matching the interface.↩︎\nSee imates documentation for the list of supported functions.↩︎",
    "crumbs": [
      "Reference",
      "Basics",
      "Comparison to *imate*"
    ]
  },
  {
    "objectID": "basic/install.html",
    "href": "basic/install.html",
    "title": "Installation",
    "section": "",
    "text": "primate is a standard PEP-517 package that can be installed via pip:\npython -m pip install scikit-primate  \nAssuming your platform is supported, no compilation is needed—see platform support for details.\n\n\n\n\n\n\nNote\n\n\n\nLike many packages registered on PyPI (e.g. sklearn), the distribution package (scikit-primate) differs from the import package (primate) (see here). Thus, to install, use the scikit- prefix, but to import no prefix is needed. primate does not rely on organizational prefixes use by some scikits (e.g. scikit-learn -&gt; sklearn).\n\n\n\nPlatform support\nFor most platforms, primate can be installed from PyPI without compilation. In particular, native wheels are currently built with cibuildwheel on the following platforms:\n\n\n\nPlatform\n3.9\n3.10\n3.11\n3.12\n3.13\n\n\n\n\nLinux (manylinux x86_64)\n✅\n✅\n✅\n✅\n✅\n\n\nMacOS (x86_64)\n✅\n✅\n✅\n✅\n✅\n\n\nMacOS ARM (arm64)\n✅\n✅\n✅\n✅\n✅\n\n\nWindows (AMD64)\n✅\n✅\n✅\n✅\n✅\n\n\n\nCurrently, there is no support for PyPy, 32-bit systems, or unsupported versions of CPython.\nIf your platform isn’t on this table but you would like it to be supported, feel free to make an issue.\n\n\nCompiling from source\nA C++20 compiler is required to compile the package from its source distribution. Current builds all compile with some variant of clang (version 15.0+) or gcc. For platform- and compiler-specific settings, consult the build scripts and CI configuration files.\n\n\nC++ Installation\nprimate’s C++ interface is header-only, making it easy to compile your own extension modules. The simplest way to link these headers is to add primate as a dependency to your package and use the get_include() function to find the appropriate directory.\n\nsetuptoolsmeson-pythongit submodule\n\n\n# setup.py\nimport primate as pm\n...\nExtension('extension_name', ..., include_dirs=[pm.get_include()])\n...\n\n\n# meson.build\n...\nprimate_include_dirs = run_command(py, \n  ['-c', 'import primate as pm; print(pm.get_include())']\n).stdout().strip()\n...\n\n\nAssuming your headers are located in extern, from your git repository, you can use:\ngit submodule add https://github.com/peekxc/primate extern/primate\ngit submodule update --init\nFrom here, you can now include extern/primate/include into your C++ source files, or you can add this directory to the search path used other various build tools, such as CMake or Meson.",
    "crumbs": [
      "Reference",
      "Basics",
      "Installing"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Package overview",
    "section": "",
    "text": "primate, short for Probabilistic Implicit Matrix Trace Estimator, is a Python package that provides estimators of quantities from matrices, linear operators, and matrix functions:\nf(A) \\triangleq U f(\\Lambda) U^{\\intercal}, \\quad \\quad f : [a,b] \\to \\mathbb{R}\nThis definition is quite general in that different parameterizations of f produce a variety of spectral quantities, including the matrix inverse A^{-1}, the matrix exponential \\mathrm{exp}(A), the matrix logarithm \\mathrm{log}(A), and so on.\nComposing these with trace and diagonal estimators yields approximations for the numerical rank, the log-determinant, the Schatten norms, the eigencount, the Estrada index, the Heat Kernel Signature, and so on.\nNotable features of primate include:\nprimate was partially inspired by the imate package—for a comparison of the two, see here.",
    "crumbs": [
      "Reference",
      "Overview"
    ]
  },
  {
    "objectID": "index.html#footnotes",
    "href": "index.html#footnotes",
    "title": "Package overview",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nThis includes std::function’s, C-style function pointers, functors, and lambda expressions.↩︎",
    "crumbs": [
      "Reference",
      "Overview"
    ]
  },
  {
    "objectID": "reference/diag.html",
    "href": "reference/diag.html",
    "title": "diag",
    "section": "",
    "text": "diagonal.diag(\n    A,\n    pdf='rademacher',\n    converge='tolerance',\n    seed=None,\n    full=False,\n    callback=None,\n    **kwargs,\n)\nEstimates the diagonal of a symmetric A via the Girard-Hutchinson estimator.\nThis function random vectors to estimate of the diagonal of A via the approximation:  \\mathrm{diag}(A) = \\sum_{i=1}^n e_i^T A e_i \\approx n^{-1}\\sum_{i=1}^n v^T A v  When v are isotropic, this approximation forms an unbiased estimator of the diagonal of A.",
    "crumbs": [
      "Reference",
      "API Reference",
      "Diagonal",
      "diag"
    ]
  },
  {
    "objectID": "reference/diag.html#parameters",
    "href": "reference/diag.html#parameters",
    "title": "diag",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nA\nUnion[sp.sparse.linalg.LinearOperator, np.ndarray]\nreal symmetric matrix or linear operator.\nrequired\n\n\npdf\nUnion[str, Callable]\nChoice of zero-centered distribution to sample random vectors from.\n'rademacher'\n\n\nestimator\n\nType of estimator to use for convergence testing. See details.\nrequired\n\n\nseed\nUnion[int, np.random.Generator, None]\nSeed to initialize the rng entropy source. Set seed &gt; -1 for reproducibility.\nNone\n\n\nfull\nbool\nWhether to return additional information about the computation.\nFalse",
    "crumbs": [
      "Reference",
      "API Reference",
      "Diagonal",
      "diag"
    ]
  },
  {
    "objectID": "reference/diag.html#returns",
    "href": "reference/diag.html#returns",
    "title": "diag",
    "section": "Returns",
    "text": "Returns\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nUnion[float, tuple]\nEstimate the diagonal of A. If full = True, additional information about the computation is also returned.",
    "crumbs": [
      "Reference",
      "API Reference",
      "Diagonal",
      "diag"
    ]
  },
  {
    "objectID": "reference/diag.html#see-also",
    "href": "reference/diag.html#see-also",
    "title": "diag",
    "section": "See Also",
    "text": "See Also\n\nlanczos: the lanczos tridiagonalization algorithm.\nConfidenceCriterion: Standard estimator of the mean from iid samples.",
    "crumbs": [
      "Reference",
      "API Reference",
      "Diagonal",
      "diag"
    ]
  },
  {
    "objectID": "reference/diag.html#reference",
    "href": "reference/diag.html#reference",
    "title": "diag",
    "section": "Reference",
    "text": "Reference\n\nUbaru, S., Chen, J., & Saad, Y. (2017). Fast estimation of tr(f(A)) via stochastic Lanczos quadrature. SIAM Journal on Matrix Analysis and Applications, 38(4), 1075-1099.\nHutchinson, Michael F. “A stochastic estimator of the trace of the influence matrix for Laplacian smoothing splines.” Communications in Statistics-Simulation and Computation 18.3 (1989): 1059-1076.",
    "crumbs": [
      "Reference",
      "API Reference",
      "Diagonal",
      "diag"
    ]
  },
  {
    "objectID": "reference/diag.html#examples",
    "href": "reference/diag.html#examples",
    "title": "diag",
    "section": "Examples",
    "text": "Examples\n\nfrom primate.diagonal import diag",
    "crumbs": [
      "Reference",
      "API Reference",
      "Diagonal",
      "diag"
    ]
  },
  {
    "objectID": "reference/hutchpp.html",
    "href": "reference/hutchpp.html",
    "title": "hutchpp",
    "section": "",
    "text": "trace.hutchpp(\n    A,\n    m=None,\n    batch=32,\n    mode='reduced',\n    pdf='rademacher',\n    seed=None,\n    full=False,\n)\nHutch++ estimator.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nA\nUnion[LinearOperator, np.ndarray]\nMatrix or LinearOperator to estimate the trace of.\nrequired\n\n\nm\nOptional[int]\nnumber of matvecs to use. If not given, defaults to n // 3.\nNone\n\n\nbatch\nint\ncurrently unused.\n32",
    "crumbs": [
      "Reference",
      "API Reference",
      "Trace",
      "hutchpp"
    ]
  },
  {
    "objectID": "reference/hutchpp.html#parameters",
    "href": "reference/hutchpp.html#parameters",
    "title": "hutchpp",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nA\nUnion[LinearOperator, np.ndarray]\nMatrix or LinearOperator to estimate the trace of.\nrequired\n\n\nm\nOptional[int]\nnumber of matvecs to use. If not given, defaults to n // 3.\nNone\n\n\nbatch\nint\ncurrently unused.\n32",
    "crumbs": [
      "Reference",
      "API Reference",
      "Trace",
      "hutchpp"
    ]
  },
  {
    "objectID": "reference/stats.MeanEstimator.html",
    "href": "reference/stats.MeanEstimator.html",
    "title": "stats.MeanEstimator",
    "section": "",
    "text": "stats.MeanEstimator\nMeanEstimator(self, dim=1)"
  },
  {
    "objectID": "reference/stats.ControlVariableEstimator.html",
    "href": "reference/stats.ControlVariableEstimator.html",
    "title": "stats.ControlVariableEstimator",
    "section": "",
    "text": "stats.ControlVariableEstimator\nControlVariableEstimator(self, ecv, alpha=None, **kwargs)"
  },
  {
    "objectID": "reference/stats.Covariance.html",
    "href": "reference/stats.Covariance.html",
    "title": "stats.Covariance",
    "section": "",
    "text": "Covariance(self, dim=1)\nUpdateable covariance matrix.\nUses Welford’s algorithm to stably update the sample mean and (co)variance estimates.\n\n\n\n\n\nName\nDescription\n\n\n\n\ncovariance\nCovariance matrix of the observations.\n\n\nupdate\nUpdate mean and (co)variance estimates based on new observations.\n\n\n\n\n\nCovariance.covariance(ddof=1)\nCovariance matrix of the observations.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nddof\nint\nDelta degrees of freedom (1 for sample covariance, 0 for population)\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nnp.ndarray\nCurrent covariance matrix estimate of shape (dim, dim)\n\n\n\n\n\n\n\nCovariance.update(X)\nUpdate mean and (co)variance estimates based on new observations.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nX\nnp.ndarray\n(batch_size, dim)-array representing new observations\nrequired",
    "crumbs": [
      "Reference",
      "API Reference",
      "Stats",
      "stats.Covariance"
    ]
  },
  {
    "objectID": "reference/stats.Covariance.html#methods",
    "href": "reference/stats.Covariance.html#methods",
    "title": "stats.Covariance",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\ncovariance\nCovariance matrix of the observations.\n\n\nupdate\nUpdate mean and (co)variance estimates based on new observations.\n\n\n\n\n\nCovariance.covariance(ddof=1)\nCovariance matrix of the observations.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nddof\nint\nDelta degrees of freedom (1 for sample covariance, 0 for population)\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nnp.ndarray\nCurrent covariance matrix estimate of shape (dim, dim)\n\n\n\n\n\n\n\nCovariance.update(X)\nUpdate mean and (co)variance estimates based on new observations.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nX\nnp.ndarray\n(batch_size, dim)-array representing new observations\nrequired",
    "crumbs": [
      "Reference",
      "API Reference",
      "Stats",
      "stats.Covariance"
    ]
  },
  {
    "objectID": "reference/MeanEstimator.html",
    "href": "reference/MeanEstimator.html",
    "title": "MeanEstimator",
    "section": "",
    "text": "MeanEstimator\nMeanEstimator(self, record=False)\nSample mean estimator with stable covariance updating.",
    "crumbs": [
      "Reference",
      "API Reference",
      "Estimators",
      "MeanEstimator"
    ]
  },
  {
    "objectID": "reference/stats.ConvergenceEstimator.html",
    "href": "reference/stats.ConvergenceEstimator.html",
    "title": "stats.ConvergenceEstimator",
    "section": "",
    "text": "stats.ConvergenceEstimator\nConvergenceEstimator()\nProtocol for generic stopping criteria for sequences."
  },
  {
    "objectID": "reference/index.html",
    "href": "reference/index.html",
    "title": "Function reference",
    "section": "",
    "text": "lanczos\nLanczos method for symmetric tridiagonalization.\n\n\nrayleigh_ritz\n\n\n\nlanczos_quadrature\nCompute the Gaussian quadrature rule of a tridiagonal Jacobi matrix.\n\n\n\n\n\n\n\n\n\nhutch\nEstimates the trace of a symmetric A via the Girard-Hutchinson estimator.\n\n\nhutchpp\nHutch++ estimator.\n\n\nxtrace\nEstimates the trace of A using the XTrace trace estimator.\n\n\n\n\n\n\n\n\n\ndiag\nEstimates the diagonal of a symmetric A via the Girard-Hutchinson estimator.\n\n\nxdiag\nEstimates the diagonal of A using m / 2 matrix-vector multiplications.\n\n\n\n\n\n\n\n\n\nMatrixFunction\nLinear operator class for matrix functions.\n\n\nToeplitz\nMatrix-free operator for representing Toeplitz or circulant matrices.\n\n\nnormalize_unit\nNormalizes a linear operator to have its spectra contained in the interval [-1,1].\n\n\n\n\n\n\n\n\n\nisotropic\nGenerates random vectors from a specified isotropic distribution.\n\n\nsymmetric\nGenerates a random symmetric matrix of size n with eigenvalues ew.\n\n\nhaar\nGenerates a random matrix with prescribed eigenvalues by sampling uniformly from the orthogonal group O(n).\n\n\n\n\n\n\n\n\n\nEstimator\nProtocol for generic stopping criteria for sequences.\n\n\nMeanEstimator\nSample mean estimator with stable covariance updating.\n\n\nControlVariableEstimator\n\n\n\nConvergenceCriterion\nGeneric stopping criteria for sequences.\n\n\nCountCriterion\nConvergence criterion that returns TRUE when above a given count.\n\n\nToleranceCriterion\n\n\n\nConfidenceCriterion\nParameterizes an expected value estimator that checks convergence of a sample mean within a confidence interval using the CLT.\n\n\nKneeCriterion\n\n\n\n\n\n\n\n\n\n\nstats.Covariance\nUpdateable covariance matrix.\n\n\nstats.confidence_interval\nConfidence intervals for the sample mean of a set of measurements.",
    "crumbs": [
      "Reference",
      "API Reference",
      "Function reference"
    ]
  },
  {
    "objectID": "reference/index.html#lanczos",
    "href": "reference/index.html#lanczos",
    "title": "Function reference",
    "section": "",
    "text": "lanczos\nLanczos method for symmetric tridiagonalization.\n\n\nrayleigh_ritz\n\n\n\nlanczos_quadrature\nCompute the Gaussian quadrature rule of a tridiagonal Jacobi matrix.",
    "crumbs": [
      "Reference",
      "API Reference",
      "Function reference"
    ]
  },
  {
    "objectID": "reference/index.html#trace",
    "href": "reference/index.html#trace",
    "title": "Function reference",
    "section": "",
    "text": "hutch\nEstimates the trace of a symmetric A via the Girard-Hutchinson estimator.\n\n\nhutchpp\nHutch++ estimator.\n\n\nxtrace\nEstimates the trace of A using the XTrace trace estimator.",
    "crumbs": [
      "Reference",
      "API Reference",
      "Function reference"
    ]
  },
  {
    "objectID": "reference/index.html#diagonal",
    "href": "reference/index.html#diagonal",
    "title": "Function reference",
    "section": "",
    "text": "diag\nEstimates the diagonal of a symmetric A via the Girard-Hutchinson estimator.\n\n\nxdiag\nEstimates the diagonal of A using m / 2 matrix-vector multiplications.",
    "crumbs": [
      "Reference",
      "API Reference",
      "Function reference"
    ]
  },
  {
    "objectID": "reference/index.html#operators",
    "href": "reference/index.html#operators",
    "title": "Function reference",
    "section": "",
    "text": "MatrixFunction\nLinear operator class for matrix functions.\n\n\nToeplitz\nMatrix-free operator for representing Toeplitz or circulant matrices.\n\n\nnormalize_unit\nNormalizes a linear operator to have its spectra contained in the interval [-1,1].",
    "crumbs": [
      "Reference",
      "API Reference",
      "Function reference"
    ]
  },
  {
    "objectID": "reference/index.html#random",
    "href": "reference/index.html#random",
    "title": "Function reference",
    "section": "",
    "text": "isotropic\nGenerates random vectors from a specified isotropic distribution.\n\n\nsymmetric\nGenerates a random symmetric matrix of size n with eigenvalues ew.\n\n\nhaar\nGenerates a random matrix with prescribed eigenvalues by sampling uniformly from the orthogonal group O(n).",
    "crumbs": [
      "Reference",
      "API Reference",
      "Function reference"
    ]
  },
  {
    "objectID": "reference/index.html#estimators",
    "href": "reference/index.html#estimators",
    "title": "Function reference",
    "section": "",
    "text": "Estimator\nProtocol for generic stopping criteria for sequences.\n\n\nMeanEstimator\nSample mean estimator with stable covariance updating.\n\n\nControlVariableEstimator\n\n\n\nConvergenceCriterion\nGeneric stopping criteria for sequences.\n\n\nCountCriterion\nConvergence criterion that returns TRUE when above a given count.\n\n\nToleranceCriterion\n\n\n\nConfidenceCriterion\nParameterizes an expected value estimator that checks convergence of a sample mean within a confidence interval using the CLT.\n\n\nKneeCriterion",
    "crumbs": [
      "Reference",
      "API Reference",
      "Function reference"
    ]
  },
  {
    "objectID": "reference/index.html#stats",
    "href": "reference/index.html#stats",
    "title": "Function reference",
    "section": "",
    "text": "stats.Covariance\nUpdateable covariance matrix.\n\n\nstats.confidence_interval\nConfidence intervals for the sample mean of a set of measurements.",
    "crumbs": [
      "Reference",
      "API Reference",
      "Function reference"
    ]
  },
  {
    "objectID": "reference/KneeCriterion.html",
    "href": "reference/KneeCriterion.html",
    "title": "KneeCriterion",
    "section": "",
    "text": "KneeCriterion\nKneeCriterion(self, S=1.0)",
    "crumbs": [
      "Reference",
      "API Reference",
      "Estimators",
      "KneeCriterion"
    ]
  },
  {
    "objectID": "reference/stats.CentralLimitEstimator.html",
    "href": "reference/stats.CentralLimitEstimator.html",
    "title": "stats.CentralLimitEstimator",
    "section": "",
    "text": "CentralLimitEstimator(self, confidence=0.95, atol=0.05, rtol=0.01)\nParameterizes an expected value estimator that checks convergence of a sample mean within a confidence interval using the CLT.\n\n\n\ncall = Updates the estimator with newly measured samples\nconverged = Checks convergence of the estimator within an interval\n  plot = Plots the samples and their sample distribution CI's"
  },
  {
    "objectID": "reference/stats.CentralLimitEstimator.html#provides-the-following-methods",
    "href": "reference/stats.CentralLimitEstimator.html#provides-the-following-methods",
    "title": "stats.CentralLimitEstimator",
    "section": "",
    "text": "call = Updates the estimator with newly measured samples\nconverged = Checks convergence of the estimator within an interval\n  plot = Plots the samples and their sample distribution CI's"
  },
  {
    "objectID": "reference/ControlVariableEstimator.html",
    "href": "reference/ControlVariableEstimator.html",
    "title": "ControlVariableEstimator",
    "section": "",
    "text": "ControlVariableEstimator\nControlVariableEstimator(self, ecv, alpha=None, **kwargs)",
    "crumbs": [
      "Reference",
      "API Reference",
      "Estimators",
      "ControlVariableEstimator"
    ]
  },
  {
    "objectID": "reference/Estimator.html",
    "href": "reference/Estimator.html",
    "title": "Estimator",
    "section": "",
    "text": "Estimator\nEstimator()\nProtocol for generic stopping criteria for sequences.",
    "crumbs": [
      "Reference",
      "API Reference",
      "Estimators",
      "Estimator"
    ]
  },
  {
    "objectID": "reference/symmetric.html",
    "href": "reference/symmetric.html",
    "title": "symmetric",
    "section": "",
    "text": "symmetric(n, dist='normal', pd=True, ew=None, seed=None)\nGenerates a random symmetric matrix of size n with eigenvalues ew.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nn\nint\nThe size of the matrix.\nrequired\n\n\ndist\nstr\nDistribution of individual matrix entries.\n'normal'\n\n\npd\nbool\nWhether to ensure the generated matrix is positive-definite. Potentially clips eigenvalues.\nTrue\n\n\new\nnp.ndarray\nDesired eigenvalues of A. If not provided, generates random values in the range [0, 1].\nNone\n\n\nseed\nUnion[int, np.random.Generator, None]\nseed for the random number generator.\nNone\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nnp.ndarray\nA random symmetric matrix with the presribed eigenvalues.",
    "crumbs": [
      "Reference",
      "API Reference",
      "Random",
      "symmetric"
    ]
  },
  {
    "objectID": "reference/symmetric.html#parameters",
    "href": "reference/symmetric.html#parameters",
    "title": "symmetric",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nn\nint\nThe size of the matrix.\nrequired\n\n\ndist\nstr\nDistribution of individual matrix entries.\n'normal'\n\n\npd\nbool\nWhether to ensure the generated matrix is positive-definite. Potentially clips eigenvalues.\nTrue\n\n\new\nnp.ndarray\nDesired eigenvalues of A. If not provided, generates random values in the range [0, 1].\nNone\n\n\nseed\nUnion[int, np.random.Generator, None]\nseed for the random number generator.\nNone",
    "crumbs": [
      "Reference",
      "API Reference",
      "Random",
      "symmetric"
    ]
  },
  {
    "objectID": "reference/symmetric.html#returns",
    "href": "reference/symmetric.html#returns",
    "title": "symmetric",
    "section": "",
    "text": "Name\nType\nDescription\n\n\n\n\n\nnp.ndarray\nA random symmetric matrix with the presribed eigenvalues.",
    "crumbs": [
      "Reference",
      "API Reference",
      "Random",
      "symmetric"
    ]
  },
  {
    "objectID": "reference/lanczos.html",
    "href": "reference/lanczos.html",
    "title": "lanczos",
    "section": "",
    "text": "lanczos(\n    A,\n    v0=None,\n    deg=None,\n    rtol=1e-08,\n    orth=0,\n    sparse_mat=False,\n    return_basis=False,\n    seed=None,\n    dtype=None,\n    **kwargs,\n)\nLanczos method for symmetric tridiagonalization.\nThis function implements Paiges A27 variant (1) of the Lanczos method for tridiagonalizing linear operators, with additional modifications to support varying degrees of re-orthogonalization. In particular, orth=0 corresponds to no re-orthogonalization, orth &lt; deg corresponds to partial re-orthogonalization, and orth &gt;= deg corresponds to full re-orthogonalization.\nThe Lanczos method builds a tridiagonal T from a symmetric A via an orthogonal change-of-basis Q:  Q^T A Q  = T  Unlike other Lanczos implementations (e.g. SciPy’s eigsh), which includes e.g. sophisticated restarting, deflation, and selective-reorthogonalization steps, this method simply executes deg steps of the Lanczos method with the supplied v0 and returns the diagonals of the resulting tridiagonal matrix T.\nRayleigh-Ritz approximations of the eigenvalues of A can be further obtained by diagonalizing T via any symmetric tridiagonal eigenvalue solver, scipy.linalg.eigh_tridiagonal though note unlike eigsh no checking is performed for ‘ghost’ or already converged eigenvalues. To increase the accuracy of these eigenvalue approximation, try increasing orth and deg. Supplying either negative values or values larger than deg for orth will result in full re-orthogonalization, though note the number of matvecs scales linearly with deg and the number of inner-products scales quadratically with orth.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nA\nUnion[np.ndarray, sparray, LinearOperator]\nSymmetric operator to tridiagonalize.\nrequired\n\n\nv0\nOptional[np.ndarray]\nInitial vector to orthogonalize against.\nNone\n\n\ndeg\nOptional[int]\nSize of the Krylov subspace to expand.\nNone\n\n\nrtol\nfloat\nRelative tolerance to consider the invariant subspace as converged.\n1e-08\n\n\north\nint\nNumber of additional Lanczos vectors to orthogonalize against.\n0\n\n\nsparse_mat\nbool\nWhether to output the tridiagonal matrix as a sparse matrix.\nFalse\n\n\nreturn_basis\nbool\nIf True, returns the Krylov basis vectors Q.\nFalse\n\n\ndtype\nOptional[np.dtype]\nThe precision dtype to specialize the computation.\nNone\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\ntuple\nA tuple (a,b) parameterizing the diagonal and off-diagonal of the tridiagonal Jacobi matrix. If return_basis=True,\n\n\n\ntuple\nthe tuple (a,b), Q is returned, where Q represents an orthogonal basis for the degree-deg Krylov subspace.\n\n\n\n\n\n\n\nscipy.linalg.eigh_tridiagonal : Eigenvalue solver for real symmetric tridiagonal matrices.\noperator.matrix_function : Approximates the action of a matrix function via the Lanczos method.\n\n\n\n\n\nPaige, Christopher C. “Computational variants of the Lanczos method for the eigenproblem.” IMA Journal of Applied Mathematics 10.3 (1972): 373-381.",
    "crumbs": [
      "Reference",
      "API Reference",
      "Lanczos",
      "lanczos"
    ]
  },
  {
    "objectID": "reference/lanczos.html#parameters",
    "href": "reference/lanczos.html#parameters",
    "title": "lanczos",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nA\nUnion[np.ndarray, sparray, LinearOperator]\nSymmetric operator to tridiagonalize.\nrequired\n\n\nv0\nOptional[np.ndarray]\nInitial vector to orthogonalize against.\nNone\n\n\ndeg\nOptional[int]\nSize of the Krylov subspace to expand.\nNone\n\n\nrtol\nfloat\nRelative tolerance to consider the invariant subspace as converged.\n1e-08\n\n\north\nint\nNumber of additional Lanczos vectors to orthogonalize against.\n0\n\n\nsparse_mat\nbool\nWhether to output the tridiagonal matrix as a sparse matrix.\nFalse\n\n\nreturn_basis\nbool\nIf True, returns the Krylov basis vectors Q.\nFalse\n\n\ndtype\nOptional[np.dtype]\nThe precision dtype to specialize the computation.\nNone",
    "crumbs": [
      "Reference",
      "API Reference",
      "Lanczos",
      "lanczos"
    ]
  },
  {
    "objectID": "reference/lanczos.html#returns",
    "href": "reference/lanczos.html#returns",
    "title": "lanczos",
    "section": "",
    "text": "Name\nType\nDescription\n\n\n\n\n\ntuple\nA tuple (a,b) parameterizing the diagonal and off-diagonal of the tridiagonal Jacobi matrix. If return_basis=True,\n\n\n\ntuple\nthe tuple (a,b), Q is returned, where Q represents an orthogonal basis for the degree-deg Krylov subspace.",
    "crumbs": [
      "Reference",
      "API Reference",
      "Lanczos",
      "lanczos"
    ]
  },
  {
    "objectID": "reference/lanczos.html#see-also",
    "href": "reference/lanczos.html#see-also",
    "title": "lanczos",
    "section": "",
    "text": "scipy.linalg.eigh_tridiagonal : Eigenvalue solver for real symmetric tridiagonal matrices.\noperator.matrix_function : Approximates the action of a matrix function via the Lanczos method.",
    "crumbs": [
      "Reference",
      "API Reference",
      "Lanczos",
      "lanczos"
    ]
  },
  {
    "objectID": "reference/lanczos.html#references",
    "href": "reference/lanczos.html#references",
    "title": "lanczos",
    "section": "",
    "text": "Paige, Christopher C. “Computational variants of the Lanczos method for the eigenproblem.” IMA Journal of Applied Mathematics 10.3 (1972): 373-381.",
    "crumbs": [
      "Reference",
      "API Reference",
      "Lanczos",
      "lanczos"
    ]
  },
  {
    "objectID": "index.html#installation",
    "href": "index.html#installation",
    "title": "Package overview",
    "section": "Installation",
    "text": "Installation\nprimate is a standard PEP-517 package, and thus can be installed via pip:\npython -m pip install scikit-primate\nAssuming your platform is supported, no compilation is needed.\nSee the installation page for details.",
    "crumbs": [
      "Reference",
      "Overview"
    ]
  },
  {
    "objectID": "index.html#applications",
    "href": "index.html#applications",
    "title": "Package overview",
    "section": "Applications",
    "text": "Applications\nApplications of matrix functions include characterizing folding in proteins, principal component regression, spectral clustering, Gaussian process likelihood estimation, counting triangles in distributed-memory networks, characterizing graph similarity, and deep neural loss landscape analysis.\nIf you have a particular application, feel free to make a computational notebook to illustrate it as a use-case!",
    "crumbs": [
      "Reference",
      "Overview"
    ]
  },
  {
    "objectID": "basic/integration.html",
    "href": "basic/integration.html",
    "title": "Integration",
    "section": "",
    "text": "primate supports a variety of matrix-types of the box, including numpy ndarray’s, compressed sparse matrices (a lá SciPy), and LinearOperators.\nThe basic requirements for any operator A to be used with any of primate’s spectral method are:\nHere’s an example of a simple operator representing a Diagonal matrix:\nNote that by following the subclassing rules of SciPy’s LinearOperator, this class inherits a .matvec() method and thus satisfies the constraints above.\nAlternativelu, using SciPy’s aslinearoperator, this can also be done in a one-liner:"
  },
  {
    "objectID": "basic/integration.html#c-usage",
    "href": "basic/integration.html#c-usage",
    "title": "Integration",
    "section": "C++ usage",
    "text": "C++ usage\nSimilarly, to call any C++ function, such hutch or lanczos, simply pass any type with .shape() and .matvec() member functions:\nclass LinOp {\n  int nrow, ncol;\n  \n  LinOp(int nr, int nc) : nrow(nr), ncol(nc) {}\n  \n  void matvec(const float* input, float* output) const {\n    ... // implementation details \n  }\n\n  void shape() const { return std::make_pair(nrow, ncol); }\n}\nIt’s up to you to ensure shape() yields the correct size; primate will supply vectors to input of size .shape().second (number of columns) and guarantees the pointer to the output will be at least shape().first (number of rows), no more.\nTo read more about how semantics extend to the C++ side via C++20 concepts, see the C++ integration guide. If you’re using pybind11 and you want to extend primate’s Python API to work natively with linear operator implemented in C++, see the pybind11 integration guide."
  },
  {
    "objectID": "basic/quickstart.html",
    "href": "basic/quickstart.html",
    "title": "primate quickstart",
    "section": "",
    "text": "Below is a quick introduction to primate.",
    "crumbs": [
      "Reference",
      "Quickstart"
    ]
  },
  {
    "objectID": "basic/quickstart.html#trace-estimation",
    "href": "basic/quickstart.html#trace-estimation",
    "title": "primate quickstart",
    "section": "Trace estimation",
    "text": "Trace estimation\nA variety of trace estimators—that is, algorithms for estimating the quantity:\n \\mathrm{tr}(A) = \\sum\\limits_{i=1}^n A_{ii} = \\sum\\limits_{i=1}^n \\lambda_i \nare available in the primate.trace module:\n\nfrom primate.trace import hutch, hutchpp, xtrace\nfrom primate.random import symmetric\nA = symmetric(150)  ## random symmetric matrix \n\nprint(f\"Actual trace:  {A.trace():6f}\")     ## Actual trace\nprint(f\"Hutch:         {hutch(A):6f}\")      ## Crude monte-carlo estimator\nprint(f\"Hutch++:       {hutchpp(A):6f}\")    ## Monte-Carlo estimator w/ deflation \nprint(f\"XTrace:        {xtrace(A):6f}\")     ## Epperly's algorithm\n\nActual trace:  67.787515\nHutch:         68.217892\nHutch++:       67.966344\nXTrace:        67.787515\n\n\nHere, A can be a numpy matrix, a sparse matrix, or a LinearOperator. If the spectral sum of interest is not just the sum of the eigenvalues, but rather the sum under composition with some spectral function f(\\lambda), i.e. the quantity of interest is of the form:\n \\mathrm{tr}(f(A)) = \\sum\\limits_{i=1}^n f(A)_{ii} = \\sum\\limits_{i=1}^n f(\\lambda_i) \nThen you may alternatively use the matrix_function API to construct a LinearOperator by passing in the corresponding spectral function as a Callable or by passing a string representing the name of one of the following built-in spectral functions:\n\n\n\n\n\n\n\n\n\nname\nmatrix function\nApplications\nnumpy call\n\n\n\n\nidentity\nA\nBasic matrix operations\nA\n\n\nlog\n\\log(A)\nDeterminant, entropy-like measures\nlogm(A)\n\n\nexp\ne^A\nDynamical systems, graph diffusion\nexpm(A)\n\n\ninv\nA^{-1}\nStability analysis, linear systems\ninv(A)\n\n\nsign\n\\text{sgn}_\\epsilon(A)\nRank approximation, low-rank modeling\nU @ U.T\n\n\nsqrt\nA^{1/2}\nDiffusion, kernel methods\nsqrtm(A)\n\n\nsquare\nA^2\nEnergy measures, stability\nA @ A\n\n\nPCA\nP_A (eigenspace)\nDim. reduction, feature extraction\nCustom projection matrix\n\n\nTikhonov\n(A + \\lambda I)^{-1}\nRegularized inversion, stability\ninv(A + lambda * eye(n))\n\n\nheat\ne^{-tA}\nDiffusion on graphs, spectral clustering\nexpm(-t * A)\n\n\npagerank\n(I - \\alpha A)^{-1}v\nNetwork centrality, web ranking\nIterative solver\n\n\n\n\nFor example, one might compute the log-determinant of a positive definite matrix as follows:\n\nfrom primate.operators import matrix_function, IdentityOperator\nA = symmetric(150, pd=True)       # eigenvalues in (0, 1] \nM = matrix_function(A, fun=\"log\") # or fun=np.log \n\nprint(f\"logdet(A) :  {np.log(np.linalg.det(A)):6f}\")\nprint(f\"tr(log(A)):  {np.sum(np.log(np.linalg.eigvalsh(A))):6f}\")\nprint(f\"Hutch     :  {hutch(M):6f}\")\nprint(f\"Hutch++   :  {hutchpp(M):6f}\")\nprint(f\"XTrace    :  {xtrace(M):6f}\")\n\nlogdet(A) :  -154.144312\ntr(log(A)):  -154.144312\nHutch     :  -166.639177\nHutch++   :  -153.737941\nXTrace    :  -153.978924",
    "crumbs": [
      "Reference",
      "Quickstart"
    ]
  },
  {
    "objectID": "basic/quickstart.html#diagonal-estimation",
    "href": "basic/quickstart.html#diagonal-estimation",
    "title": "primate quickstart",
    "section": "Diagonal estimation",
    "text": "Diagonal estimation\nThe diagonals of matrices and matrix functions (implicitly or explicitly represented) can also be estimated via nearly identical API used for the trace.\n\nfrom primate.diagonal import diag, xdiag\n\nd1 = A.diagonal()\nd2 = diag(A, rtol=1e-4)\n\nprint(f\"Diagonal (true): {d1}\")\nprint(f\"Diagonal est   : {d2}\")\n\nDiagonal (true): [0.54968697 0.48960101 0.49447692 0.47773641 0.48477961 0.46974089\n 0.45448756 0.49278268 0.46308226 0.51857507 0.49184517 0.50710399\n 0.46590264 0.47062913 0.47919964 0.46902484 0.50506395 0.467224\n 0.51894141 0.53466592 0.51714597 0.5279012  0.4794661  0.4813528\n 0.48721224 0.52902752 0.55330945 0.49645548 0.51938593 0.43741348\n 0.53355823 0.49958051 0.50151183 0.44675413 0.50812872 0.52613871\n 0.48945744 0.46393831 0.51136589 0.52520016 0.51533952 0.44135037\n 0.48084077 0.47808502 0.49277022 0.54158404 0.52313368 0.46183489\n 0.48163083 0.42820872 0.50302743 0.50019652 0.50572689 0.4690371\n 0.46773069 0.46568055 0.46782853 0.51038056 0.5419983  0.49355537\n 0.4211999  0.55314169 0.49461266 0.51634604 0.44610457 0.46094316\n 0.48726254 0.5162495  0.46861948 0.51666589 0.50285835 0.50864331\n 0.5056485  0.46355375 0.52290347 0.51154529 0.49792651 0.50105026\n 0.49414167 0.48316386 0.46578555 0.50729763 0.48716965 0.52587961\n 0.48433519 0.4843776  0.53213133 0.53433909 0.5230893  0.44206393\n 0.42943587 0.46864331 0.45874898 0.51964131 0.47283709 0.46225109\n 0.50855052 0.54201372 0.45718963 0.49323674 0.50499993 0.4783244\n 0.48297431 0.50510227 0.52886059 0.49522149 0.46261325 0.5078776\n 0.50785473 0.48086693 0.51157085 0.53961956 0.50951068 0.53137776\n 0.51177774 0.5115731  0.50830074 0.47874391 0.49518595 0.53173225\n 0.48020883 0.47305573 0.5466895  0.48509724 0.57844942 0.50267975\n 0.48053915 0.52886011 0.4531079  0.48519128 0.45842747 0.48260731\n 0.51087804 0.50073223 0.51589332 0.51055631 0.49588501 0.51258133\n 0.48735096 0.53209772 0.46701131 0.49457568 0.48068915 0.44291768\n 0.44864358 0.50165426 0.50940561 0.53303458 0.46230692 0.47826089]\nDiagonal est   : [0.53607086 0.49324122 0.49113666 0.47781557 0.50357503 0.43569537\n 0.42325622 0.45447445 0.50733854 0.50885887 0.51762998 0.49740386\n 0.47594739 0.46055631 0.48056577 0.49563572 0.49221762 0.45763859\n 0.52634589 0.54098616 0.5526033  0.49272358 0.49110416 0.51345753\n 0.48522175 0.56418779 0.57545486 0.48830505 0.5014901  0.43650532\n 0.55853053 0.51594561 0.51344101 0.4625863  0.516656   0.5476163\n 0.48168479 0.47644227 0.46513713 0.51763804 0.56007328 0.43658329\n 0.47722926 0.45332959 0.55550188 0.56505926 0.50828515 0.45172424\n 0.46824449 0.43532188 0.46630796 0.49534843 0.56000665 0.48462336\n 0.45903083 0.53867312 0.49287201 0.47615586 0.54132283 0.50968524\n 0.43759258 0.58123051 0.4746877  0.51983819 0.48855547 0.45826756\n 0.48569925 0.5193559  0.50111815 0.49602907 0.50187306 0.51564624\n 0.5044877  0.49516492 0.53699773 0.53619662 0.49522637 0.49021747\n 0.49303352 0.4761422  0.47717333 0.52917669 0.49497692 0.49441117\n 0.4665241  0.47693987 0.56661897 0.54354691 0.52055566 0.45443996\n 0.4442943  0.44803011 0.45358942 0.4946686  0.50283473 0.48740529\n 0.51334192 0.56235233 0.48150723 0.49305866 0.52013675 0.45956274\n 0.50475784 0.47641195 0.52173937 0.53192062 0.4641294  0.52850242\n 0.56247616 0.45048661 0.53799171 0.59090927 0.47109949 0.52749242\n 0.51867995 0.53020794 0.49290483 0.48186812 0.50892381 0.54478249\n 0.46703982 0.48050925 0.48455908 0.48991388 0.56116414 0.48157484\n 0.4350509  0.52571963 0.47811558 0.41423778 0.44215122 0.51006299\n 0.51990018 0.50194132 0.51197482 0.48566303 0.46503789 0.49796135\n 0.45517743 0.47800713 0.47378722 0.48726434 0.49106137 0.43862349\n 0.45365974 0.49619377 0.49942659 0.55166607 0.44318283 0.48603981]",
    "crumbs": [
      "Reference",
      "Quickstart"
    ]
  },
  {
    "objectID": "basic/quickstart.html#matrix-function-approximation",
    "href": "basic/quickstart.html#matrix-function-approximation",
    "title": "primate quickstart",
    "section": "Matrix function approximation",
    "text": "Matrix function approximation\nIn primate, the matrix function f(A) is not constructed explicitly but instead the action v \\mapsto f(A)v is approximated with a fixed-degree Krylov expansion. This can be useful when, for example, the matrix A itself is so large that the corresponding (typically dense) matrix function f(A) \\in \\mathbb{R}^{n \\times n} simply is too large to be explicitly represented. If you just want to approximate the action of a matrix function for a single vector v \\in \\mathbb{R}^n, simply supply the vector and the matrix alongside the matrix_function call:\n\nfrom primate.operators import matrix_function\nv = np.random.uniform(size=A.shape[0])\ny = matrix_function(A, fun=np.exp, v=v)\nprint(f\"f(A)v = {y.T}\")\n\nf(A)v = [[ 0.33822871  1.2276779   0.76719528  1.11136963  1.4334131   0.33545821\n   1.12125454  1.40637298  1.66598107  1.62535025  0.52019603  1.25063547\n   0.66670276  1.29393251  0.69282503  1.0287493   0.72214663 -0.09204598\n   1.47707884  1.22172414  0.08029525  0.78770763 -0.75596991  0.70779358\n   1.60077048  0.94272982  0.97505924  1.15440836  0.7374584   0.88640891\n   1.36302058  0.85310954  1.4806497   0.02803763  1.66195592  1.57124059\n   0.42895017  1.40212259  0.69677458  1.73957543  0.34056903  0.11018724\n  -0.14044896  1.35214665  1.11838172  0.92102208  0.16351914  1.12927213\n   0.67417896  0.47943645  0.04712505  0.86780522  1.09441989  0.00576696\n   0.95410643  1.24937734  1.00069938  1.34737089  1.34542673  1.17581268\n   0.94485497  0.61413515  1.16895108 -0.05663465  0.34726807 -0.0823824\n   0.66178324  2.03735537  0.28002841  0.36672736  1.33998001  0.71647919\n   0.76080901  0.10740978  0.33567239  1.76869953  0.58288343  1.09524021\n  -0.35552142  0.67262108  0.71137472  1.41219314  1.03440015  1.00939543\n   1.44968963  0.32503392  1.06705694  1.55320964  1.4216318   0.95248097\n   0.6225137   1.40062256  0.65766157  1.310364    0.63641147  0.614348\n   0.78440083  1.4886851   0.17951006  1.03270084  1.16250856  1.82769459\n   0.60232387  1.03733921  1.34704035  0.72221557 -0.0858992   1.01855611\n   0.03182451  0.9202459   0.62553324  0.49787513  0.50668105  1.41735634\n   1.56267389  0.32624453  0.63401124  0.3030791   1.35970263  1.06566395\n   1.56303962  1.44498106  1.17646442  0.92645546  0.39534649  0.3284482\n   0.75593762  1.18763865  0.04964799  0.35780967  0.69458988  0.81534473\n   1.2975112   0.54524531  0.63795013  0.13581013  1.65822673  0.53282028\n   0.57330929  0.84964084 -0.39623483  1.48480022  1.63635673  1.35609933\n   0.08125627  0.46667781  1.25768933  0.09536721  0.68150763  0.96698516]]\n\n\nAlternatively, if you prefer an object-oriented approach (or you plan on doing multiple matvecs), you can construct a MatrixFunction instance and use it like any other LinearOperator:\n\nfrom primate.operators import MatrixFunction\nExpA = MatrixFunction(A, fun=np.exp)\ny = ExpA @ v\nprint(f\"exp(A)v = {y}\")\n\nexp(A)v = [ 0.33822871  1.2276779   0.76719528  1.11136963  1.4334131   0.33545821\n  1.12125454  1.40637298  1.66598107  1.62535025  0.52019603  1.25063547\n  0.66670276  1.29393251  0.69282503  1.0287493   0.72214663 -0.09204598\n  1.47707884  1.22172414  0.08029525  0.78770763 -0.75596991  0.70779358\n  1.60077048  0.94272982  0.97505924  1.15440836  0.7374584   0.88640891\n  1.36302058  0.85310954  1.4806497   0.02803763  1.66195592  1.57124059\n  0.42895017  1.40212259  0.69677458  1.73957543  0.34056903  0.11018724\n -0.14044896  1.35214665  1.11838172  0.92102208  0.16351914  1.12927213\n  0.67417896  0.47943645  0.04712505  0.86780522  1.09441989  0.00576696\n  0.95410643  1.24937734  1.00069938  1.34737089  1.34542673  1.17581268\n  0.94485497  0.61413515  1.16895108 -0.05663465  0.34726807 -0.0823824\n  0.66178324  2.03735537  0.28002841  0.36672736  1.33998001  0.71647919\n  0.76080901  0.10740978  0.33567239  1.76869953  0.58288343  1.09524021\n -0.35552142  0.67262108  0.71137472  1.41219314  1.03440015  1.00939543\n  1.44968963  0.32503392  1.06705694  1.55320964  1.4216318   0.95248097\n  0.6225137   1.40062256  0.65766157  1.310364    0.63641147  0.614348\n  0.78440083  1.4886851   0.17951006  1.03270084  1.16250856  1.82769459\n  0.60232387  1.03733921  1.34704035  0.72221557 -0.0858992   1.01855611\n  0.03182451  0.9202459   0.62553324  0.49787513  0.50668105  1.41735634\n  1.56267389  0.32624453  0.63401124  0.3030791   1.35970263  1.06566395\n  1.56303962  1.44498106  1.17646442  0.92645546  0.39534649  0.3284482\n  0.75593762  1.18763865  0.04964799  0.35780967  0.69458988  0.81534473\n  1.2975112   0.54524531  0.63795013  0.13581013  1.65822673  0.53282028\n  0.57330929  0.84964084 -0.39623483  1.48480022  1.63635673  1.35609933\n  0.08125627  0.46667781  1.25768933  0.09536721  0.68150763  0.96698516]\n\n\nIf you don’t supply a vector v to the matrix_function call, a MatrixFunction instance is constructed using whatever additional arguments are passed in and returned. By default, the action of the matrix function is approximated over a fixed-degree Krylov subspace (deg) using the Lanczos method (without reorthogonalization). Some function specializations are inherently more difficult to approximate and can depend on the smoothness of f and the conditioning of the corresponding operator f(A); in general, the Lanczos method up to degree k can approximate the action v \\mapsto f(A)v as well as the operator p(A) can, where p is best-fitting degree 2k-1 polynomial approximation of f.\n\nfrom scipy.linalg import expm\nprint(f\"Error from exp(A): {np.linalg.norm((expm(A) @ v) - y)}\")\n\n\nfrom timeit import timeit\ntimeforlan = timeit(lambda: ExpA @ v, number=100)/100\n\ntimeforexpmA = timeit(lambda: expm(A), number=100)/100\nB = expm(A)\ntimeforexpmAv = timeit(lambda: B @ v, number=100)/100\n\nsample_index = 1 + np.arange(30)\ntimeforsp = timeforexpmA + timeforexpmAv * sample_index\ntimeformf = timeforlan * sample_index\n\np = figure(width=350, height=200)\n\np.line(sample_index, timeforsp, color='red')\np.scatter(sample_index, timeforsp, color='red',  size=1)\np.line(sample_index, timeformf, color='blue')\np.scatter(sample_index, timeformf, color='blue', size=1)\nshow(p)\n\nExpA = MatrixFunction(A, fun=np.exp, deg=50, orth=50)\nz = ExpA @ v\nprint(f\"Error: {np.linalg.norm((expm(A) @ v) - z)}\")\n\nError from exp(A): 3.241183264847419e-14\n\n\n\n  \n\n\n\n\n\nError: 5.638564484707072e-14",
    "crumbs": [
      "Reference",
      "Quickstart"
    ]
  },
  {
    "objectID": "basic/quickstart.html#configuration",
    "href": "basic/quickstart.html#configuration",
    "title": "primate quickstart",
    "section": "Configuration",
    "text": "Configuration\nBy default, the various estimators offered by primate simply return the estimated quantity under reasonable default parameter settings. However, in many applications one would like to have greater control over the computation and the type of information collected during execution.\nTo get all the information about the computation, simply pass full=True to obtain an EstimatorResult along with the estimate itself. This object contains information about estimation process itself, basic properties, as well as convergence information about the computation:\n\nest, info = hutch(A, full=True)\nprint(info.message)\n\nEst: 73.740 +/- 1.173 (95% CI, #S:64)\n\n\nTo get a better idea of what the sample values and the corresponding estimate looked like as the sample size increased, you can plot the sequence with the figure_sequence function:\n\nfrom primate.plotting import figure_sequence\n\nest, info = hutch(A, full=True, record=True)\np = figure_sequence(info.estimator.values)\nshow(p)",
    "crumbs": [
      "Reference",
      "Quickstart"
    ]
  }
]