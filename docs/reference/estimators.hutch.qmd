# estimators.hutch { #estimators.hutch }

```python
hutch(
    A
    fun=None
    reduce=None
    maxiter=200
    deg=20
    atol=None
    rtol=None
    stop='confidence'
    ncv=2
    orth=0
    quad='gw'
    confidence=0.95
    pdf='rademacher'
    seed=None
    num_threads=0
    verbose=False
    info=False
    plot=False
    **kwargs
)
```

Estimates the trace of a symmetric `A` or matrix function `fun(A)` via the Girard-Hutchinson estimator.

This function uses up to `maxiter` random isotropic vectors to estimate of the trace of $f(A)$, where:
$$ \mathrm{tr}(f(A)) = \mathrm{tr}(U f(\Lambda) U^T) = \sum_{i=1}^n f(\lambda_i), \quad A = U \Lambda U^T $$
The estimator is obtained by averaging quadratic forms $v \mapsto v^T f(A)v$, rescaling as necessary.

:::{.callout-note}
Convergence behavior is controlled by the `stop` parameter: "confidence" uses the central limit theorem to generate confidence
intervals on the fly, which may be used in conjunction with `atol` and `rtol` to upper-bound the error of the approximation.
Alternatively, when `stop` = 'change', the estimator is considered converged when the error between the last two iterates is less than
`atol` (or `rtol`, respectively), similar to the behavior of scipy.integrate.quadrature.
:::

## Parameters {.doc-section .doc-section-parameters}

| Name        | Type                                | Description                                                                                    | Default        |
|-------------|-------------------------------------|------------------------------------------------------------------------------------------------|----------------|
| A           | Union\[LinearOperator, np.ndarray\] | real symmetric operator.                                                                       | _required_     |
| fun         | Union\[str, Callable, None\]        | real- or vector-valued function defined on the spectrum of `A`.                                | `None`         |
| reduce      | Union\[Callable, None\]             | per-estimate aggregation function. Required when `fun` is vector-valued. Default to identity.  | `None`         |
| maxiter     | int                                 | Maximum number of random vectors to sample for the trace estimate.                             | `200`          |
| deg         | int                                 | Degree of the quadrature approximation. Must be at least 1.                                    | `20`           |
| atol        | Optional\[float\]                   | Absolute tolerance to signal convergence for early-stopping. See notes.                        | `None`         |
| rtol        | Optional\[float\]                   | Relative tolerance to signal convergence for early-stopping. See notes.                        | `None`         |
| stop        | str                                 | Early-stopping criteria to test estimator convergence. See details.                            | `'confidence'` |
| ncv         | int                                 | Number of Lanczos vectors to allocate. Must be at least 2.                                     | `2`            |
| orth        | int                                 | Number of additional Lanczos vectors to orthogonalize against. Must be less than `ncv`.        | `0`            |
| quad        | str                                 | Method used to obtain the weights of the Gaussian quadrature. See notes.                       | `'gw'`         |
| confidence  | float                               | Confidence level to consider estimator as converged. Only used when `stop` = "confidence".     | `0.95`         |
| pdf         | str                                 | Choice of zero-centered distribution to sample random vectors from.                            | `'rademacher'` |
| seed        | Optional\[int\]                     | Seed to initialize the `rng` entropy source. Set `seed` > -1 for reproducibility.              | `None`         |
| num_threads | int                                 | Number of threads to use to parallelize the computation. Set to <= 0 to let OpenMP decide.     | `0`            |
| plot        | bool                                | If true, plots the samples of the trace estimate along with their convergence characteristics. | `False`        |
| info        | bool                                | If True, returns a dictionary containing all relevant information about the computation.       | `False`        |
| kwargs      | dict                                | additional key-values to parameterize the chosen function 'fun'.                               | `{}`           |

## Returns {.doc-section .doc-section-returns}

| Name   | Type                  | Description                                                                                                    |
|--------|-----------------------|----------------------------------------------------------------------------------------------------------------|
|        | Union\[float, tuple\] | Estimate the trace of $f(A)$. If `info = True`, additional information about the computation is also returned. |

## See Also {.doc-section .doc-section-see-also}

- [lanczos](/reference/lanczos.lanczos.md): the lanczos tridiagonalization algorithm.
- [MeanEstimatorCLT](/reference/MeanEstimatorCLT.md): Standard estimator of the mean from iid samples.

## Notes {.doc-section .doc-section-notes}

To compute the weights of the quadrature, `quad` can be set to either 'golub_welsch' or 'fttr'. The former uses implicit symmetric QR
steps with Wilkinson shifts, while the latter (FTTR) uses the explicit recurrence expression for orthogonal polynomials. While both require
$O(\mathrm{deg}^2)$ time to execute, the former requires $O(\mathrm{deg}^2)$ space but is highly accurate, while the latter uses
only $O(1)$ space at the cost of stability. If `deg` is large, `fttr` is preferred for performance, though pilot testing should be
done to ensure that instability does not cause a large bias in the approximation.

## Reference {.doc-section .doc-section-reference}

1. Ubaru, S., Chen, J., & Saad, Y. (2017). Fast estimation of tr(f(A)) via stochastic Lanczos quadrature. SIAM Journal on Matrix Analysis and Applications, 38(4), 1075-1099.
2. Hutchinson, Michael F. "A stochastic estimator of the trace of the influence matrix for Laplacian smoothing splines." Communications in Statistics-Simulation and Computation 18.3 (1989): 1059-1076.

## Examples {.doc-section .doc-section-examples}

```{python}
from primate2.estimators import hutch
```