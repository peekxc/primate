---
title: "Python Integration"
---

To demonstrate the SLQ method in Python, we start with a simple symmetric matrix $A \in \mathbb{R}^{n \times n}$. 

```{python}
import numpy as np
from primate.random import symmetric
A = symmetric(150, psd = True)
```

This generates a random positive semi-definite matrix with eigenvalues in the interval $[0, 1]$. 

```{python}
#| echo: false
#| output: false
from bokeh.io import output_notebook
output_notebook()
```



```{python}
from primate.trace import sl_trace
estimates = sl_trace(A, plot=True)
```

```{python}
tr_est = np.mean(estimates)
print(f"Error: {abs(tr_est - A.trace()):.5}")
print(f"Samples std. deviation: {estimates.std(ddof=1)}")
print(f"Estimator standard error: {estimates.std(ddof=1)/np.sqrt(len(estimates))}")
```

```{python}
# from scipy.sparse import csr_array, csc_array
# from scipy.sparse.linalg import LinearOperator, aslinearoperator
# tr_true = np.sum(A.diagonal())
# tr_est_1 = slq(A, **slq_params)
# tr_est_2 = slq(csc_array(A), **slq_params)
# tr_est_3 = slq(aslinearoperator(A), **slq_params)
# assert np.isclose(np.take(tr_est_1,0), tr_true, atol=np.abs(tr_true)*0.35), "Estimate is off more than 5%"
# assert np.isclose(np.take(tr_est_2,0), tr_true, atol=np.abs(tr_true)*0.35), "Estimate is off more than 5%"
# assert np.isclose(np.take(tr_est_3,0), tr_true, atol=np.abs(tr_true)*0.35), "Estimate is off more than 5%"

```