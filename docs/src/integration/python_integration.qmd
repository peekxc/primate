---
title: "Python Integration"
---


To demonstrate the SLQ method in python, we start with a simple symmetric matrix `A \in \mathbb{R}^{n \times n}`. 
```{python}
import numpy as np 
from scipy.linalg import toeplitz
X = toeplitz(np.random.uniform(size=50))
A = X.T @ X
```

```{python}
#| echo: false
from bokeh.io import output_notebook
output_notebook()
```

```{python}

from primate.trace import slq
# est, info = slq(A, matrix_function = "sqrt", return_info=True)
tr_est = slq(A, matrix_function = "sqrt", plot=True, error_atol=10.0)
```

can be called with any linear operator. 

```{python}
# from scipy.sparse import csr_array, csc_array
# from scipy.sparse.linalg import LinearOperator, aslinearoperator
# tr_true = np.sum(A.diagonal())
# tr_est_1 = slq(A, **slq_params)
# tr_est_2 = slq(csc_array(A), **slq_params)
# tr_est_3 = slq(aslinearoperator(A), **slq_params)
# assert np.isclose(np.take(tr_est_1,0), tr_true, atol=np.abs(tr_true)*0.35), "Estimate is off more than 5%"
# assert np.isclose(np.take(tr_est_2,0), tr_true, atol=np.abs(tr_true)*0.35), "Estimate is off more than 5%"
# assert np.isclose(np.take(tr_est_3,0), tr_true, atol=np.abs(tr_true)*0.35), "Estimate is off more than 5%"

```