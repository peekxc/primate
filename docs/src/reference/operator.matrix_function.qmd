# operator.matrix_function { #primate.operator.matrix_function }

`operator.matrix_function(A, fun='identity', deg=20, rtol=None, orth=0, **kwargs)`

Constructs a `LinearOperator` approximating the action of the matrix function `fun(A)`. 

This function uses the Lanczos quadrature method to approximate the action of matrix function:
$$ v \mapsto f(A)v, \quad f(A) = U f(\lambda) U^T $$
The resulting operator may be used in conjunction with other trace estimation methods, such as 
the `hutch` or `xtrace` estimators.

The weights of the quadrature may be computed using either the Golub-Welsch (GW) or 
Forward Three Term Recurrence algorithms (FTTR) (see the `quad` parameter). For a description 
of the other parameters, see the Lanczos function. 

:::{.callout-note}
To compute the weights of the quadrature, the GW computation uses implicit symmetric QR steps with Wilkinson shifts, 
while the FTTR algorithm uses the explicit expression for orthogonal polynomials. While both require $O(\mathrm{deg}^2)$ time to execute, 
the former requires $O(\mathrm{deg}^2)$ space but is highly accurate, while the latter uses only $O(1)$ space at the cost of stability. 
If `deg` is large and accuracy is not a priority, the `fttr` method is preferred. 
:::



## Parameters:

  A : ndarray, sparray, or LinearOperator
      real symmetric operator.
  fun : str or Callable, default="identity"
      real-valued function defined on the spectrum of `A`.
  deg : int, default=20
      Degree of the Krylov expansion.
  rtol : float, default=1e-8
      Relative tolerance to consider two Lanczos vectors are numerically orthogonal.
  orth: int, default=0
      Number of additional Lanczos vectors to orthogonalize against when building the Krylov basis.
  kwargs : dict, optional
    additional key-values to parameterize the chosen function 'fun'.



## Returns:

  operator : LinearOperator
      Operator approximating the action of `fun` on the spectrum of `A`