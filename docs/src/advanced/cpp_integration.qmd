---
title: "C++ Integration"
---

<!-- `primate`'s matrix-free API can handle effectively _any_ linear operator type that [supports the interface](integration/cpp_integration.qmd). What's perhaps surprising is that this generality is essentially zero-cost: no abstract base classes, no type erasure, no fancy [delegate pattern](https://simoncoenen.com/blog/programming/CPP_Delegates). Just supply a type with defined `.shape()` and a `.matvec()` methods and you're good to go! 

The heart of this generic progammming design is [C++20 concepts](https://en.cppreference.com/w/cpp/language/constraints). To make things most concrete, this guide delves into the `LinearOperator` concept, and gives an example of how to create a suitable operator for the `sl_trace` method. -->

<!-- To use `primate` from C++,  
`primate` uses [C++20 concepts](https://en.cppreference.com/w/cpp/language/constraints) to be generic in its API.  -->

<!-- ## The `LinearOperator` interface -->

<!-- ## The `LinearOperator` concept -->

`primate`'s generic API is enabled through [function templates](https://en.cppreference.com/w/cpp/language/function_template) specialized using [C++20 concepts](https://en.cppreference.com/w/cpp/language/constraints). 
In other words, a function `F` requiring concept `C` will compile with _any_ type `T` so long as `T` respects the constraints imposed by `C`. 
For example, generically, any type `T` respecting the `LinearOperator`_concept_ shown below can be passed to the _Lanczos_ method: 

```cpp
using FP = std::floating_point; 
template < typename T, FP float_t = typename T::value_type >
concept LinearOperator = requires(T A, const float_t* v, float_t* o) {
  { A.matvec(v, o) }; // o = A v
  { A.shape() } -> std::convertible_to< std::pair< size_t, size_t > >;
};
```

In english, an instance `A` of type `T` is said to support the `LinearOperator` concept if it has: 

1. A method $Av \mapsto o$, with signature `A.matvec(const float_t* v, float_t* o)` 
2. A method yielding $(\mathrm{card}(o), \mathrm{card}(v))$, with signature `A.shape() -> pair< ... >`

`shape()` should return a pair `(n,m)` representing the sizes of the output and input vectors, respectively. Note in the matrix setting this corresponds to the number of rows and columns.

<!-- This enables, amongst other functionalities, `primate`'s functions to have zero-cost support for essentially any operator, even those external to the package.  -->

## Other Concepts

Depending on the problem at hand, the supplied operator may need to meet other constraints. Here's a short list additional operator concepts:

| Concept                   | Supports     | Signature           | Requires |
|---------------------------|-------------------------|------------------------------|------------------------|
| `LinearOperator`          | $A v \mapsto o$           | `A.matvec(v, o)`            | NA                     |
| `AdjointOperator`         | $A^T v \mapsto o$         | `A.rmatvec(v, o)`           | `LinearOperator` |
| `AdditiveOperator`        | $o \gets o + \alpha Av$ | `A.matvec_add(v, alpha, o)` | `LinearOperator` |
| `AffineOperator`          | Sets $t$ s.t. $A + tB$  | `A.set_parameter(t)`        | `LinearOperator` |
| `QuadOperator`            | $v^T A v$              | `A.quad(v)`                  | NA               |

The exported methods in `primate` only need the minimum constraints to be satisfied to compile: if you need access to the _Lanczos_ method, then just supporting the `LinearOperator` concept is sufficient. On the other hand, adding support for other constraints can optimize the efficiency of certain methods; for example, the `hutch` method technically only requires a `LinearOperator` to do trace estimation (via `matvec` calls), but will also compile and prefer calling `quad` with a `QuadOperator` as input. In such a situaton, if your operator has an efficient quadratic form $v \mapsto v^T A v$, then implementing `quad` may improve the performance of `hutch`. 
<!-- However, if you e.g. want to compute the trace of the _gramian_ $f(A^T A)$ of a given operator via _Golub-Kahan_,the operator must also satisfy the `AdjointOperator` concept. For a full list of the supported concepts, see [linearoperator.h](). -->