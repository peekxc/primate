---
title: "C++ Integration"
---

<!-- `primate`'s matrix-free API can handle effectively _any_ linear operator type that [supports the interface](integration/cpp_integration.qmd). What's perhaps surprising is that this generality is essentially zero-cost: no abstract base classes, no type erasure, no fancy [delegate pattern](https://simoncoenen.com/blog/programming/CPP_Delegates). Just supply a type with defined `.shape()` and a `.matvec()` methods and you're good to go! 

The heart of this generic progammming design is [C++20 concepts](https://en.cppreference.com/w/cpp/language/constraints). To make things most concrete, this guide delves into the `LinearOperator` concept, and gives an example of how to create a suitable operator for the `sl_trace` method. -->

<!-- To use `primate` from C++,  
`primate` uses [C++20 concepts](https://en.cppreference.com/w/cpp/language/constraints) to be generic in its API.  -->

<!-- ## The `LinearOperator` interface -->

To get started calling any matrix-free function provided by `primate`, such `sl_trace` or `lanczos`, simply pass any type with a `.shape()` and `.matvec()` member functions defined like so: 

```cpp
class LinOp {
  int nrow, ncol;
  
  LinOp(int nr, int nc) : nrow(nr), ncol(nc) {}
  
  void matvec(const float* input, float* output) const {
    ... // implementation details 
  }

  void shape() const { return std::make_pair(nrow, ncol); }
}
```

It's up to you to ensure `shape()` yields the correct size; `primate` will supply vectors to `input` of size `.shape().second` (number of columns) and guarantees the pointer to the `output` will be at least `shape().first` (number of rows), no more. 

## The `LinearOperator` concept

`primate`'s generic API is enabled through [C++20 concepts](https://en.cppreference.com/w/cpp/language/constraints). 
Thus, the more exact statement is that any type respecting the `LinearOperator` [concept](https://en.cppreference.com/w/cpp/language/constraints) shown below can be passed: 

```cpp
using FP = std::floating_point; 
template < typename T, FP float_t = typename T::value_type >
concept LinearOperator = requires(T A, const float_t* v, float_t* o) {
  { A.matvec(v, o) }; // o = A v
  { A.shape() } -> std::convertible_to< std::pair< size_t, size_t > >;
};
```

An instance `A` of type `T` is said to support the `LinearOperator` concept if it has: 

1. A method $Av \mapsto o$, with signature `A.matvec(const float_t* v, float_t* o)` 
2. A method yielding $(\mathrm{card}(o), \mathrm{card}(v))$, with signature`A.shape() -> pair< ... >`

`shape()` should yield a pair `(n,m)` representing the sizes of the output and input vectors, respectively. This corresponds to the number of rows and columns in the matrix setting.

## Other Concepts

Depending on the problem at hand, the supplied operator may need to meet other constraints. Here's a short list additional operator concepts:

| Concept                   | Supports     | Signature           | Requires |
|---------------------------|-------------------------|------------------------------|------------------------|
| `LinearOperator`          | $A v \mapsto o$           | `A.matvec(v, o)`            | NA                     |
| `AdjointOperator`         | $A^T v \mapsto o$         | `A.rmatvec(v, o)`           | `LinearOperator` |
| `AdditiveOperator`        | $o \gets o + \alpha Av$ | `A.matvec_add(v, alpha, o)` | `LinearOperator` |
| `AffineOperator`          | Sets $t$ s.t. $A + tB$  | `A.set_parameter(t)`        | `LinearOperator` |

Respecting these constraints is opt-in: if your operator is symmetric and you only need access to the _Lanczos_ method, then any satisfying the `LinearOperator` concept is sufficient. 
<!-- However, if you e.g. want to compute the trace of the _gramian_ $f(A^T A)$ of a given operator via _Golub-Kahan_,the operator must also satisfy the `AdjointOperator` concept. For a full list of the supported concepts, see [linearoperator.h](). -->