---
title: "Installation"
---

`primate` is a standard [PEP-517](https://peps.python.org/pep-0517/) package, and thus can be installed via `pip`: 

```python
pip install < primate source directory >
```

Currently the package must be built from source via cloning the repository. PYPI support is planned. 

<!-- https://stackoverflow.com/questions/122906s39/quantifiable-metrics-benchmarks-on-the-usage-of-header-only-c-libraries/13593041#13593041 -->

### Platform support

<!-- Platform-specific wheels are currently built with cibuildwheel and uploaded to PyPI.  -->
For certain platforms, `primate` can be installed from PyPi without compilation. As of 12/29/23, native `primate` wheels are built for the following platforms:

| Platform                          | 3.8 | 3.9 | 3.10 | 3.11 | 3.12 |
|-----------------------------------|:---:|:---:|:----:|:----:|:----:|
| **Linux (manylinux x86_64)**      | ✅  | ✅  | ✅   | ✅   | ✅   |
| **MacOS (x86_64)**                | ✅  | ✅  | ✅   | ✅   | ✅   |
| **MacOS ARM (arm64) [^1]**        | ✅  | ✅  | ✅   | ✅   | ✅   |
| **Windows (AMD64) [^2]**          | ✅  | ✅  | ✅   | ✅   | ✅   |

Wheels are currently built with [cibuildwheel](https://cibuildwheel.readthedocs.io/en/stable/).
Currently no support is offered for [PyPy](https://www.pypy.org/), 32-bit systems, or [unsupported versions of CPython](https://devguide.python.org/versions/#supported-versions). 

If your platform isn't on this table but you would like it to be supported, feel free to [make an issue](https://github.com/peekxc/primate). 

[^1]: Single-thread execution only; ARM-based OSX runners compile with Apple's clang, which doesn't natively ship with `libomp.dylib`, though this [may be fixable](https://mac.r-project.org/openmp/). Feel free to file an PR if you can get this working.  
[^2]: Single-thread execution only; `primate` depends on OpenMP 4.5+, which isn't supported on any Windows compiler I'm aware of. 

### Compiling from source

To install the package from its source distribution, a C++20 compiler is required; the current builds are all built with some variant of [clang](https://clang.llvm.org/), preferably version 15.0 or higher. For platform- and compiler-specific settings, consult the build scripts and CI configuration files.

### C++ Installation

`primate`'s C++ interface is [header-only](https://en.wikipedia.org/wiki/Header-only), making it easy to compile your own [extension modules](https://docs.python.org/3/extending/extending.html). The simplest way to link these headers is to add `primate` as a [dependency](https://peps.python.org/pep-0631/) to your package and use the `get_include()` function to find the appropriate directory.

::: {.panel-tabset}
## setuptools 

```python
# setup.py
import primate as pm
...
Extension('extension_name', ..., include_dirs=[pm.get_include()])
...
```

## meson-python

```python
# meson.build
...
primate_include_dirs = run_command(py, 
  ['-c', 'import primate as pm; print(pm.get_include())']
).stdout().strip()
...
```

## git submodule 

Assuming your headers are located in `extern`, from your git repository, you can use: 

```bash
git submodule add https://github.com/peekxc/primate extern/primate
git submodule update --init
```

From here, you can now include `extern/primate/include` into your C++ source files, or you can add this directory to the search path used other various build tools, such as [CMake](https://cmake.org/) or [Meson](https://mesonbuild.com/).

::: 
