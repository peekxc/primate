---
title: "`primate` usage - quickstart"
---

Below is a quick introduction to `primate`. For more introductory material, theor

```{python}
#| echo: false
#| output: false
from bokeh.plotting import figure, show
from bokeh.io import output_notebook
output_notebook()
import numpy as np
np.random.seed(1234)
```

To do trace estimation, use functions in the `trace` module: 
```{python}
from primate.trace import hutch, xtrace
from primate.random import symmetric
A = symmetric(150)  ## random positive-definite matrix 

print(f"Actual trace: {A.trace():6f}")     ## Actual trace
print(f"Girard-Hutch: {hutch(A):6f}")      ## Monte-carlo tyoe estimator
print(f"XTrace:       {xtrace(A):6f}")     ## Epperly's algorithm
```

For matrix functions, you can either construct a `LinearOperator` directly via the `matrix_function` API, or supply a string to the parameter `fun` describing the spectral function to apply. For example, one might compute the log-determinant as follows:

```{python}
from primate.operator import matrix_function
M = matrix_function(A, fun="log") 
## Alternative: M = matrix_function(A, fun=np.log)

ew = np.linalg.eigvalsh(A)
print(f"logdet(A):  {np.sum(np.log(ew)):6f}")
print(f"GR approx:  {hutch(M):6f}")
print(f"XTrace:     {xtrace(M):6f}")
```

Note in the above example you can supply to `fun` either string describing a built-in spectral function or an arbitrary `Callable`. The former is preferred when possible, as function evaluations will generally be faster and `hutch` can also be parallelized. Multi-threaded execution of e.g. `hutch` with arbitrary functions is not currently allowed due to the GIL, though there are options available for getting around this---see [the integration docs](../advanced/cpp_integration.qmd) for more details. 

<!-- For 'plain' operators (i.e. `fun = None`), `XTrace` should recover the exact trace (up to very small roundoff error). However, for matrix functions $f(A)$, there will be some inherent inaccuracy as the underlying matrix-vector multiplication is only approximate.  -->

Some function specializations 

```{python}
from primate.functional import numrank
ew = np.sort(np.random.uniform(size=150, low=0, high=1))
ew[:30] = 0.0
A = symmetric(150, ew = ew, pd = False)

print(f"numrank(A): {np.linalg.matrix_rank(A)}")
print(f"GR approx:  {numrank(A, est='hutch')}")
print(f"XTrace:     {numrank(A, est='xtrace')}")
```
