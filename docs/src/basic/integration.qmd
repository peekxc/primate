---
title: "Integration"
---

`primate` supports a variety of matrix-types of the box, including numpy `ndarray`'s, compressed [sparse matrices](https://docs.scipy.org/doc/scipy/reference/sparse.html) (a lÃ¡ SciPy), and [LinearOperators](https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.linalg.LinearOperator.html). Note the last option enables the use of _matrix free_ operators.

More generally, the basic requirements for any operator `A` to be used with e.g. the `Lanczos` method in `primate` are: 

1. A method `A.matvec(input: ndarray) -> ndarray` implementing $v \mapsto Av$
2. A method `A.shape() -> tuple[int, int]` giving the output/input dimensions of $A$

<!-- Note that in the matrix setting, `A.shape()` yields `(A.nrow(), A.ncol())`, so existing matrix implementations like [ndarray](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html)'s and [sparray](https://docs.scipy.org/doc/scipy/reference/sparse.html#sparse-array-classes)'s natively support the interface. -->

These semantics extend to the C++ side as well via _C++20 concepts_---see the [C++ integration guide](advanced/cpp_integration.qmd). If you're using pybind11 and you want to extend `primate`'s Python API to work natively with linear operator implemented in C++, see the [pybind11 integration guide](advanced/pybind11_integration.qmd). 

