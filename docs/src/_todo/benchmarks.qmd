---
title: "Benchmarks"
---

```{python}
import numpy as np
from primate.trace import slq
from scipy.linalg import toeplitz

np.random.seed(1234) 
B = toeplitz(np.random.normal(size=100))
A = B.T @ B

slq_params = dict(
  matrix_function = "sqrt",
  orthogonalize=0, lanczos_degree=20, 
  confidence_level=0.95, error_rtol=1e-2, min_num_samples=150, max_num_samples=180, 
  num_threads=1, seed=0
)
slq(A, **slq_params)
```

```{python}
np.random.seed(1234)
rng_seeds = np.random.choice(range(2**16), size=30)

slq_params = dict(
  matrix_function = "sqrt",
  orthogonalize=0, lanczos_degree=100, 
  min_num_samples=200, max_num_samples=200, 
  num_threads=1, 
  return_info = True
)

nuclear_norm_truth = np.sum(np.sqrt(np.abs(np.linalg.eigvalsh(A))))
poly_degrees = list(range(2, 20, 1))
results = { d : np.zeros(200) for d in poly_degrees }
for d in poly_degrees:
  for seed in rng_seeds:
    params = slq_params.copy() | { 'lanczos_degree' : d, 'seed' : seed }
    _, info = slq(A, **params)
    slq_samples = np.squeeze(info['convergence']['samples'])
    slq_averages = np.cumsum(slq_samples)/(np.arange(len(slq_samples))+1)
    results[d] += np.abs(slq_averages - np.repeat(nuclear_norm_truth, len(slq_averages)))


from bokeh.plotting import figure 
p = figure(width=300, height=250)
for d in poly_degrees:
  p.line(np.arange(1, 200+1), results[d], legend_label=f"degree = {d}")
show(p)





nuclear_norm_truth = np.sum(np.sqrt(np.abs(np.linalg.eigvalsh(A))))
orth_sizes = list(range(0, 30, 5))
results = { no : np.zeros(200) for no in orth_sizes }
for n_orth in orth_sizes:
  for seed in rng_seeds:
    params = slq_params.copy() | { 'orthogonalize' : n_orth, 'seed' : seed }
    _, info = slq(A, **params)
    slq_samples = np.squeeze(info['convergence']['samples'])
    slq_averages = np.cumsum(slq_samples)/(np.arange(len(slq_samples))+1)
    results[n_orth] += np.abs(slq_averages - np.repeat(nuclear_norm_truth, len(slq_averages)))

from bokeh.plotting import figure 
p = figure(width=300, height=250)
for no in range(30):
  p.line(np.arange(1, 200+1), results[no], legend_label=f"n_orth = {no}")
show(p)

results[4] - results[19]

```

```{python}
from primate.plotting import figure_trace
from bokeh.plotting import show
from bokeh.io import output_notebook
output_notebook()

# show(figure_trace(info))
```


```{python}
import optuna
default_params = dict(
  matrix_function = "sqrt",
  orthogonalize=10, lanczos_degree=20, 
  min_num_samples=200, max_num_samples=200, 
  seed = 0
)

nuclear_norm_truth = np.sum(np.sqrt(np.abs(np.linalg.eigvalsh(A))))
wut = {}
def objective(trial):
  # print(trial)
  params = default_params.copy()
  # trial.suggest_int("orthogonalize", low=0, high=30)
  params['orthogonalize'] = trial.suggest_int("orthogonalize", 0, 20, log=False)
  # params['lanczos_degree'] = trial.suggest_int("lanczos_degree", 0, 99, log=False)

  tr_est, info = slq(A, return_info = True, **params)
  slq_samples = np.squeeze(info['convergence']['samples'])
  slq_averages = np.cumsum(slq_samples)/(np.arange(len(slq_samples))+1)
  return np.linalg.norm(slq_averages - np.repeat(nuclear_norm_truth, len(slq_averages)))

study = optuna.create_study()
study.optimize(objective, n_trials=250)


from optuna.visualization import plot_optimization_history
from optuna.visualization import plot_parallel_coordinate

plot_optimization_history(study)
plot_parallel_coordinate(study)
study.best_params
``` 



```{python}

det_est, info = slq(A, plot=False, return_info=True, **slq_params)


np.log(np.linalg.det(A))


# np.log(np.prod(np.sort(np.abs(np.linalg.eigvalsh(A)))))

```

```{python}
I = np.eye(100)
tr_true = np.sum([np.take(I[:,[i]].T @ T @ I[:,[i]], 0) for i in range(100)])


tr_true = np.sum(T.diagonal())
assert np.isclose(np.take(tr_est,0), tr_true, atol=np.abs(tr_true)*0.05), "Estimate is off more than 5%"

```