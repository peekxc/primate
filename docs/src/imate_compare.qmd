---
title: "Comparison to `imate`"
---

`primate`'s namesake (and some of the original code[^1]) was inspired from the (excellent) [`imate` package](https://github.com/ameli/imate), prompting questions about their differences. In general, `primate` was developed with slightly different goals in mind than `imate`, most of which have to do with things like integrability, extensibility, and choice of FFI / build system.

Notable differences between the two packages include:

| **Feature**      | `primate`             | `imate`                |
|------------------|-----------------------|------------------------|
| Matrix support   | Symmetric only[^4]    | Symmetric or Rectangular |
| Parallel support | Limited[^3]           | CPU / GPU              |
| Function support | Arbitrary             | Package supported[^2]  |
| Operator support | Arbitrary             | Matrix-derived         |
| Linking strategy | Header only           | Dynamically linked     |
| C++ version      | $\geq$ C++20          | Any                    |
| FFI              | Pybind11 / Pythran    | Cython                 |
| Build tool       | Meson                 | CMake                  |

One motivation for developing `primate` was to modularize and streamline access to Lanczos-based approximation methods, which is achieved through the use of things like [function templates](https://en.cppreference.com/w/cpp/language/function_template), [type erasure](https://en.wikipedia.org/wiki/Type_erasure), and [header-only](https://en.wikipedia.org/wiki/Header-only) definitions. 
These modifications not only simplify access from *user* (i.e. dependent) packages, but they enable native support for arbitrary classes adhering to the [LinearOperator concept](advanced/cpp_integration.qmd). For more details on this, see the integration guides. 

[^1]: Before v0.2, much of `primate`'s code was essentially ported and refactored from `imate`. The code for v0.2+ has been re-written using the [Eigen](https://eigen.tuxfamily.org/index.php?title=Main_Page) template C++ library. In v0.5+, `primate` was refactored again, migrating most of the codebase to Python or Pythran for maintainability. 
[^2]: See [imates documentation](https://ameli.github.io/imate/api.html#functions) for the list of supported functions.
[^3]: Parallel support w/ OpenMP was dropped in v0.5 in favor moving to a [ThreadPoolExecutor](https://docs.python.org/3/library/concurrent.futures.html#module-concurrent.futures) in the future (yet to be implemented). Moreover, unlike `imate`, `primate` does not provide native GPU-implemented Linear operators. However, one may always _wrap_ a e.g. CUDA- or ROCm-based GPU-backed tensor as a `LinearOperator` to accelerate matrix-vector products.
[^4]: With matrix functions, `primate` only supports symmetric operators; however, many quantities from rectangular matrices can be obtained from e.g. $A^T A$

<!-- - `imate` might be convenient for Python users that use Cython, whereas `primate` is convenient for C++ users that use pybind11 -->

```{=html}
<!-- - `imate` supports multiple trace estimation approaches, e.g. decompositional methods. `primate` only supports the SLQ method.  
- `imate` supports both CPU parallelism and GPU parallelism. `primate` only supports CPU parallelism.
- `imate` builds [Cython](https://cython.org/) bindings (w/ [setuptools](https://setuptools.pypa.io/en/latest/index.html)); `primate` builds [pybind11](https://pybind11.readthedocs.io/en/stable/index.html) bindings (w/ [meson](https://meson-python.readthedocs.io/en/latest/#))
- `imate`'s uses traditional runtime-linking shared libraries, wheres `primate`'s external API is header-only ([comparison](https://stackoverflow.com/questions/12671383/benefits-of-header-only-libraries))
- `imate` works with any standard C++ compiler, whereas `primate` requires (some) compiler support for C++20.
- `imate` is optimized for a fixed set of matrix functions, whereas `primate` allows for arbitrary / user-supplied functions
- `imate` requires matrices as input, whereas `primate` allows arbitrary / user-supplied `LinearOperator`'s   
- `imate` works with any standard C++ compiler, whereas `primate` requires C++20 support. -->
```