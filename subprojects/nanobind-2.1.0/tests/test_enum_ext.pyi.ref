import enum
from typing import overload


class ClassicEnum(enum.Enum):
    Item1 = 0

    Item2 = 1

    def get_value(self) -> int: ...

    @property
    def my_value(self) -> int: ...

    def foo(self) -> ClassicEnum: ...

    @staticmethod
    def bar(arg: ClassicEnum, /) -> ClassicEnum: ...

class Enum(enum.Enum):
    """enum-level docstring"""

    A = 0
    """Value A"""

    B = 1
    """Value B"""

    C = 4294967295
    """Value C"""

class EnumProperty:
    def __init__(self) -> None: ...

    @property
    def read_enum(self) -> Enum: ...

Item1: ClassicEnum = ClassicEnum.Item1

Item2: ClassicEnum = ClassicEnum.Item2

class SEnum(enum.IntEnum):
    A = 0

    B = 1

    C = -1

@overload
def from_enum(arg: Enum) -> int: ...

@overload
def from_enum(arg: SEnum) -> int: ...

def from_enum_default_0(value: Enum = Enum.A) -> int: ...

def from_enum_default_1(value: SEnum = SEnum.A) -> int: ...

def from_enum_implicit(arg: Enum, /) -> int: ...

def to_enum(arg: int, /) -> Enum: ...
