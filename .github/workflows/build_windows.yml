name: Build Windows package

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build_windows:      
    name: ${{ matrix.os }} - Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   CC: clang-cl
      #   CXX: clang-cl
      #   LDFLAGS: "-Wl,-S"
    strategy:
      fail-fast: false
      matrix:
        os: ["windows-latest"]
        python-version: ["3.8", "3.9", "3.10", "3.11"]
    steps:
    - name: Checkout 
      uses: actions/checkout@v3
      with: 
        submodules: true
    - name: Install rtools (mingw-w64)
      run: |
        choco install rtools -y --no-progress --force --version=4.0.0.20220206
        echo "c:\rtools40\ucrt64\bin;" >> $env:GITHUB_PATH
    # - name: Set up Clang
    #   uses: egor-tensin/setup-clang@v1
    #   with:
    #     version: latest
    #     platform: x64
    # - name: Setup MSVC 
    #   uses: ilammy/msvc-dev-cmd@v1.4.1
    # - name: Prepare MSVC
    #   uses: bus1/cabuild/action/msdevshell@v1
    #   with:
    #     architecture: x64
    # - name: Install Clang with OpenMP support using Chocolatey
    #   run: |
    #     choco install -y llvm --params "clang;compiler=clang" --version 13.0.0
    #     $env:PATH = "C:\Program Files\LLVM\bin;$env:PATH"
    #     clang --version
    # - name: Install OpenBLAS using Chocolatey
    #   run: |
    #     choco install -y openblas
    #     $env:PATH = "C:\ProgramData\chocolatey\lib\openblas\tools\bin;$env:PATH"
    #     openblas_info
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install pytest pytest-cov coverage-badge coveralls pytest-benchmark
    - name: Install package
      run: |
        pip install --verbose .
    - name: Test with pytest
      run: |
        python -m pytest tests/ --cov=primate --benchmark-skip
        coverage report -m
    - name: Build a wheel
      run: | 
        output_dir="$(mktemp -d)"
        python - pip wheel . --wheel-dir "$output_dir" 
    - name: Test the wheel 
      run: | 
        python -m pip uninstall primate -y
        python -m pip install $(find "$output_dir" -type f | grep *primate*.whl)
        python -m pytest tests/ --cov=primate --benchmark-skip
        coverage report -m
    # - name: Make wheel w/ delvewheel 
    #   run: |
    #     bash ./tools/repair_windows.sh
